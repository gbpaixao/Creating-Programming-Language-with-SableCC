/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getDeclSequence() != null)
        {
            node.getDeclSequence().apply(this);
        }
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        outAStart(node);
    }

    public void inAVarDeclaracao(AVarDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVarDeclaracao(AVarDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclaracao(AVarDeclaracao node)
    {
        inAVarDeclaracao(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getVarSequence() != null)
        {
            node.getVarSequence().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAVarDeclaracao(node);
    }

    public void inAConstDeclaracao(AConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracao(AConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        inAConstDeclaracao(node);
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAConstDeclaracao(node);
    }

    public void inAFloatTipo(AFloatTipo node)
    {
        defaultIn(node);
    }

    public void outAFloatTipo(AFloatTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatTipo(AFloatTipo node)
    {
        inAFloatTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outAFloatTipo(node);
    }

    public void inAIntTipo(AIntTipo node)
    {
        defaultIn(node);
    }

    public void outAIntTipo(AIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipo(AIntTipo node)
    {
        inAIntTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAIntTipo(node);
    }

    public void inACharTipo(ACharTipo node)
    {
        defaultIn(node);
    }

    public void outACharTipo(ACharTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharTipo(ACharTipo node)
    {
        inACharTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACharTipo(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        outAVetorVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAIntValor(AIntValor node)
    {
        defaultIn(node);
    }

    public void outAIntValor(AIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValor(AIntValor node)
    {
        inAIntValor(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntValor(node);
    }

    public void inAFloatValor(AFloatValor node)
    {
        defaultIn(node);
    }

    public void outAFloatValor(AFloatValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatValor(AFloatValor node)
    {
        inAFloatValor(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatValor(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDoisPontosIgual() != null)
        {
            node.getDoisPontosIgual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getVarSequence() != null)
        {
            node.getVarSequence().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outALeiaComando(node);
    }

    public void inAEscrevaComando(AEscrevaComando node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComando(AEscrevaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComando(AEscrevaComando node)
    {
        inAEscrevaComando(node);
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExpSequence() != null)
        {
            node.getExpSequence().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAEscrevaComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outASeComando(node);
    }

    public void inASeElseComando(ASeElseComando node)
    {
        defaultIn(node);
    }

    public void outASeElseComando(ASeElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeElseComando(ASeElseComando node)
    {
        inASeElseComando(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        if(node.getIfElse() != null)
        {
            node.getIfElse().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outASeElseComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getCaseSequence() != null)
        {
            node.getCaseSequence().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAAvalieComando(node);
    }

    public void inAAvalieElseComando(AAvalieElseComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieElseComando(AAvalieElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieElseComando(AAvalieElseComando node)
    {
        inAAvalieElseComando(node);
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getCaseSequence() != null)
        {
            node.getCaseSequence().apply(this);
        }
        if(node.getCaseElse() != null)
        {
            node.getCaseElse().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAAvalieElseComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAParaComando(node);
    }

    public void inAParaPassoComando(AParaPassoComando node)
    {
        defaultIn(node);
    }

    public void outAParaPassoComando(AParaPassoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaPassoComando(AParaPassoComando node)
    {
        inAParaPassoComando(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getNInt1() != null)
        {
            node.getNInt1().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAParaPassoComando(node);
    }

    public void inAOpSumExp(AOpSumExp node)
    {
        defaultIn(node);
    }

    public void outAOpSumExp(AOpSumExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpSumExp(AOpSumExp node)
    {
        inAOpSumExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getOpSum() != null)
        {
            node.getOpSum().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAOpSumExp(node);
    }

    public void inATermoExp(ATermoExp node)
    {
        defaultIn(node);
    }

    public void outATermoExp(ATermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExp(ATermoExp node)
    {
        inATermoExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExp(node);
    }

    public void inAOpMultTermo(AOpMultTermo node)
    {
        defaultIn(node);
    }

    public void outAOpMultTermo(AOpMultTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMultTermo(AOpMultTermo node)
    {
        inAOpMultTermo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getOpMult() != null)
        {
            node.getOpMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAOpMultTermo(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAParentesesFator(AParentesesFator node)
    {
        defaultIn(node);
    }

    public void outAParentesesFator(AParentesesFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesFator(AParentesesFator node)
    {
        inAParentesesFator(node);
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        outAParentesesFator(node);
    }

    public void inAValorFator(AValorFator node)
    {
        defaultIn(node);
    }

    public void outAValorFator(AValorFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFator(AValorFator node)
    {
        inAValorFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFator(node);
    }

    public void inAVarFator(AVarFator node)
    {
        defaultIn(node);
    }

    public void outAVarFator(AVarFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarFator(AVarFator node)
    {
        inAVarFator(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarFator(node);
    }

    public void inAMenosFator(AMenosFator node)
    {
        defaultIn(node);
    }

    public void outAMenosFator(AMenosFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosFator(AMenosFator node)
    {
        inAMenosFator(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMenosFator(node);
    }

    public void inAOuExpLogica(AOuExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOuExpLogica(AOuExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpLogica(AOuExpLogica node)
    {
        inAOuExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getTermo1() != null)
        {
            node.getTermo1().apply(this);
        }
        outAOuExpLogica(node);
    }

    public void inATermo1ExpLogica(ATermo1ExpLogica node)
    {
        defaultIn(node);
    }

    public void outATermo1ExpLogica(ATermo1ExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo1ExpLogica(ATermo1ExpLogica node)
    {
        inATermo1ExpLogica(node);
        if(node.getTermo1() != null)
        {
            node.getTermo1().apply(this);
        }
        outATermo1ExpLogica(node);
    }

    public void inAXorTermo1(AXorTermo1 node)
    {
        defaultIn(node);
    }

    public void outAXorTermo1(AXorTermo1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorTermo1(AXorTermo1 node)
    {
        inAXorTermo1(node);
        if(node.getTermo1() != null)
        {
            node.getTermo1().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getTermo2() != null)
        {
            node.getTermo2().apply(this);
        }
        outAXorTermo1(node);
    }

    public void inATermo2Termo1(ATermo2Termo1 node)
    {
        defaultIn(node);
    }

    public void outATermo2Termo1(ATermo2Termo1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo2Termo1(ATermo2Termo1 node)
    {
        inATermo2Termo1(node);
        if(node.getTermo2() != null)
        {
            node.getTermo2().apply(this);
        }
        outATermo2Termo1(node);
    }

    public void inAETermo2(AETermo2 node)
    {
        defaultIn(node);
    }

    public void outAETermo2(AETermo2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAETermo2(AETermo2 node)
    {
        inAETermo2(node);
        if(node.getTermo2() != null)
        {
            node.getTermo2().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getElemento1() != null)
        {
            node.getElemento1().apply(this);
        }
        outAETermo2(node);
    }

    public void inATermo3Termo2(ATermo3Termo2 node)
    {
        defaultIn(node);
    }

    public void outATermo3Termo2(ATermo3Termo2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo3Termo2(ATermo3Termo2 node)
    {
        inATermo3Termo2(node);
        if(node.getElemento1() != null)
        {
            node.getElemento1().apply(this);
        }
        outATermo3Termo2(node);
    }

    public void inAElem5Elemento1(AElem5Elemento1 node)
    {
        defaultIn(node);
    }

    public void outAElem5Elemento1(AElem5Elemento1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElem5Elemento1(AElem5Elemento1 node)
    {
        inAElem5Elemento1(node);
        if(node.getTermo5() != null)
        {
            node.getTermo5().apply(this);
        }
        outAElem5Elemento1(node);
    }

    public void inATermo3Elemento1(ATermo3Elemento1 node)
    {
        defaultIn(node);
    }

    public void outATermo3Elemento1(ATermo3Elemento1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo3Elemento1(ATermo3Elemento1 node)
    {
        inATermo3Elemento1(node);
        if(node.getTermo3() != null)
        {
            node.getTermo3().apply(this);
        }
        outATermo3Elemento1(node);
    }

    public void inAOpIgualTermo3(AOpIgualTermo3 node)
    {
        defaultIn(node);
    }

    public void outAOpIgualTermo3(AOpIgualTermo3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpIgualTermo3(AOpIgualTermo3 node)
    {
        inAOpIgualTermo3(node);
        if(node.getTermo7() != null)
        {
            node.getTermo7().apply(this);
        }
        if(node.getOpIgualdade() != null)
        {
            node.getOpIgualdade().apply(this);
        }
        if(node.getTermo7Aux() != null)
        {
            node.getTermo7Aux().apply(this);
        }
        outAOpIgualTermo3(node);
    }

    public void inATermo4Termo3(ATermo4Termo3 node)
    {
        defaultIn(node);
    }

    public void outATermo4Termo3(ATermo4Termo3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo4Termo3(ATermo4Termo3 node)
    {
        inATermo4Termo3(node);
        if(node.getTermo4() != null)
        {
            node.getTermo4().apply(this);
        }
        outATermo4Termo3(node);
    }

    public void inAOpCompTermo4(AOpCompTermo4 node)
    {
        defaultIn(node);
    }

    public void outAOpCompTermo4(AOpCompTermo4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpCompTermo4(AOpCompTermo4 node)
    {
        inAOpCompTermo4(node);
        if(node.getTermo7() != null)
        {
            node.getTermo7().apply(this);
        }
        if(node.getOpComp() != null)
        {
            node.getOpComp().apply(this);
        }
        if(node.getTermo7Aux() != null)
        {
            node.getTermo7Aux().apply(this);
        }
        outAOpCompTermo4(node);
    }

    public void inAExpAuxTermo7(AExpAuxTermo7 node)
    {
        defaultIn(node);
    }

    public void outAExpAuxTermo7(AExpAuxTermo7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAuxTermo7(AExpAuxTermo7 node)
    {
        inAExpAuxTermo7(node);
        if(node.getExpAux() != null)
        {
            node.getExpAux().apply(this);
        }
        outAExpAuxTermo7(node);
    }

    public void inANaoTermo5(ANaoTermo5 node)
    {
        defaultIn(node);
    }

    public void outANaoTermo5(ANaoTermo5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoTermo5(ANaoTermo5 node)
    {
        inANaoTermo5(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getTermo5() != null)
        {
            node.getTermo5().apply(this);
        }
        outANaoTermo5(node);
    }

    public void inATermo6Termo5(ATermo6Termo5 node)
    {
        defaultIn(node);
    }

    public void outATermo6Termo5(ATermo6Termo5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo6Termo5(ATermo6Termo5 node)
    {
        inATermo6Termo5(node);
        if(node.getTermo6() != null)
        {
            node.getTermo6().apply(this);
        }
        outATermo6Termo5(node);
    }

    public void inAParentesesTermo6(AParentesesTermo6 node)
    {
        defaultIn(node);
    }

    public void outAParentesesTermo6(AParentesesTermo6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesTermo6(AParentesesTermo6 node)
    {
        inAParentesesTermo6(node);
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        outAParentesesTermo6(node);
    }

    public void inAOpSumExpAux(AOpSumExpAux node)
    {
        defaultIn(node);
    }

    public void outAOpSumExpAux(AOpSumExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpSumExpAux(AOpSumExpAux node)
    {
        inAOpSumExpAux(node);
        if(node.getExpAux() != null)
        {
            node.getExpAux().apply(this);
        }
        if(node.getOpSum() != null)
        {
            node.getOpSum().apply(this);
        }
        if(node.getTermoAux() != null)
        {
            node.getTermoAux().apply(this);
        }
        outAOpSumExpAux(node);
    }

    public void inATermoExpAux(ATermoExpAux node)
    {
        defaultIn(node);
    }

    public void outATermoExpAux(ATermoExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExpAux(ATermoExpAux node)
    {
        inATermoExpAux(node);
        if(node.getTermoAux() != null)
        {
            node.getTermoAux().apply(this);
        }
        outATermoExpAux(node);
    }

    public void inAOpMultTermoAux(AOpMultTermoAux node)
    {
        defaultIn(node);
    }

    public void outAOpMultTermoAux(AOpMultTermoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMultTermoAux(AOpMultTermoAux node)
    {
        inAOpMultTermoAux(node);
        if(node.getTermoAux() != null)
        {
            node.getTermoAux().apply(this);
        }
        if(node.getOpMult() != null)
        {
            node.getOpMult().apply(this);
        }
        if(node.getFatorAux() != null)
        {
            node.getFatorAux().apply(this);
        }
        outAOpMultTermoAux(node);
    }

    public void inAFatorTermoAux(AFatorTermoAux node)
    {
        defaultIn(node);
    }

    public void outAFatorTermoAux(AFatorTermoAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermoAux(AFatorTermoAux node)
    {
        inAFatorTermoAux(node);
        if(node.getFatorAux() != null)
        {
            node.getFatorAux().apply(this);
        }
        outAFatorTermoAux(node);
    }

    public void inAValorFatorAux(AValorFatorAux node)
    {
        defaultIn(node);
    }

    public void outAValorFatorAux(AValorFatorAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFatorAux(AValorFatorAux node)
    {
        inAValorFatorAux(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFatorAux(node);
    }

    public void inAVarFatorAux(AVarFatorAux node)
    {
        defaultIn(node);
    }

    public void outAVarFatorAux(AVarFatorAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarFatorAux(AVarFatorAux node)
    {
        inAVarFatorAux(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarFatorAux(node);
    }

    public void inAMenosFatorAux(AMenosFatorAux node)
    {
        defaultIn(node);
    }

    public void outAMenosFatorAux(AMenosFatorAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosFatorAux(AMenosFatorAux node)
    {
        inAMenosFatorAux(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getFatorAux() != null)
        {
            node.getFatorAux().apply(this);
        }
        outAMenosFatorAux(node);
    }

    public void inAParentesesFatorAux(AParentesesFatorAux node)
    {
        defaultIn(node);
    }

    public void outAParentesesFatorAux(AParentesesFatorAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesFatorAux(AParentesesFatorAux node)
    {
        inAParentesesFatorAux(node);
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExpAux() != null)
        {
            node.getExpAux().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        outAParentesesFatorAux(node);
    }

    public void inAMaisOpSum(AMaisOpSum node)
    {
        defaultIn(node);
    }

    public void outAMaisOpSum(AMaisOpSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisOpSum(AMaisOpSum node)
    {
        inAMaisOpSum(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisOpSum(node);
    }

    public void inAMenosOpSum(AMenosOpSum node)
    {
        defaultIn(node);
    }

    public void outAMenosOpSum(AMenosOpSum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosOpSum(AMenosOpSum node)
    {
        inAMenosOpSum(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosOpSum(node);
    }

    public void inAVezesOpMult(AVezesOpMult node)
    {
        defaultIn(node);
    }

    public void outAVezesOpMult(AVezesOpMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVezesOpMult(AVezesOpMult node)
    {
        inAVezesOpMult(node);
        if(node.getVezes() != null)
        {
            node.getVezes().apply(this);
        }
        outAVezesOpMult(node);
    }

    public void inADivididoOpMult(ADivididoOpMult node)
    {
        defaultIn(node);
    }

    public void outADivididoOpMult(ADivididoOpMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivididoOpMult(ADivididoOpMult node)
    {
        inADivididoOpMult(node);
        if(node.getDividido() != null)
        {
            node.getDividido().apply(this);
        }
        outADivididoOpMult(node);
    }

    public void inAIgualdadeOpIgualdade(AIgualdadeOpIgualdade node)
    {
        defaultIn(node);
    }

    public void outAIgualdadeOpIgualdade(AIgualdadeOpIgualdade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualdadeOpIgualdade(AIgualdadeOpIgualdade node)
    {
        inAIgualdadeOpIgualdade(node);
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        outAIgualdadeOpIgualdade(node);
    }

    public void inADiferencaOpIgualdade(ADiferencaOpIgualdade node)
    {
        defaultIn(node);
    }

    public void outADiferencaOpIgualdade(ADiferencaOpIgualdade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferencaOpIgualdade(ADiferencaOpIgualdade node)
    {
        inADiferencaOpIgualdade(node);
        if(node.getDiferenca() != null)
        {
            node.getDiferenca().apply(this);
        }
        outADiferencaOpIgualdade(node);
    }

    public void inAMaiorOpComp(AMaiorOpComp node)
    {
        defaultIn(node);
    }

    public void outAMaiorOpComp(AMaiorOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorOpComp(AMaiorOpComp node)
    {
        inAMaiorOpComp(node);
        if(node.getMaiorQue() != null)
        {
            node.getMaiorQue().apply(this);
        }
        outAMaiorOpComp(node);
    }

    public void inAMenorOpComp(AMenorOpComp node)
    {
        defaultIn(node);
    }

    public void outAMenorOpComp(AMenorOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorOpComp(AMenorOpComp node)
    {
        inAMenorOpComp(node);
        if(node.getMenorQue() != null)
        {
            node.getMenorQue().apply(this);
        }
        outAMenorOpComp(node);
    }

    public void inAMaiorIgualOpComp(AMaiorIgualOpComp node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualOpComp(AMaiorIgualOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualOpComp(AMaiorIgualOpComp node)
    {
        inAMaiorIgualOpComp(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorIgualOpComp(node);
    }

    public void inAMenorIgualOpComp(AMenorIgualOpComp node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualOpComp(AMenorIgualOpComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualOpComp(AMenorIgualOpComp node)
    {
        inAMenorIgualOpComp(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorIgualOpComp(node);
    }

    public void inAXorOpRel(AXorOpRel node)
    {
        defaultIn(node);
    }

    public void outAXorOpRel(AXorOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorOpRel(AXorOpRel node)
    {
        inAXorOpRel(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorOpRel(node);
    }

    public void inAEOpRel(AEOpRel node)
    {
        defaultIn(node);
    }

    public void outAEOpRel(AEOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEOpRel(AEOpRel node)
    {
        inAEOpRel(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAEOpRel(node);
    }

    public void inAOuOpRel(AOuOpRel node)
    {
        defaultIn(node);
    }

    public void outAOuOpRel(AOuOpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuOpRel(AOuOpRel node)
    {
        inAOuOpRel(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuOpRel(node);
    }

    public void inAIfElse(AIfElse node)
    {
        defaultIn(node);
    }

    public void outAIfElse(AIfElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElse(AIfElse node)
    {
        inAIfElse(node);
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        outAIfElse(node);
    }

    public void inACase(ACase node)
    {
        defaultIn(node);
    }

    public void outACase(ACase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACase(ACase node)
    {
        inACase(node);
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        outACase(node);
    }

    public void inACaseElse(ACaseElse node)
    {
        defaultIn(node);
    }

    public void outACaseElse(ACaseElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseElse(ACaseElse node)
    {
        inACaseElse(node);
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        outACaseElse(node);
    }

    public void inANInt(ANInt node)
    {
        defaultIn(node);
    }

    public void outANInt(ANInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANInt(ANInt node)
    {
        inANInt(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outANInt(node);
    }

    public void inANInt1(ANInt1 node)
    {
        defaultIn(node);
    }

    public void outANInt1(ANInt1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANInt1(ANInt1 node)
    {
        inANInt1(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outANInt1(node);
    }

    public void inATermo7Aux(ATermo7Aux node)
    {
        defaultIn(node);
    }

    public void outATermo7Aux(ATermo7Aux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermo7Aux(ATermo7Aux node)
    {
        inATermo7Aux(node);
        if(node.getTermo7() != null)
        {
            node.getTermo7().apply(this);
        }
        outATermo7Aux(node);
    }

    public void inADclSequenceDeclSequence(ADclSequenceDeclSequence node)
    {
        defaultIn(node);
    }

    public void outADclSequenceDeclSequence(ADclSequenceDeclSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADclSequenceDeclSequence(ADclSequenceDeclSequence node)
    {
        inADclSequenceDeclSequence(node);
        if(node.getDeclSequence() != null)
        {
            node.getDeclSequence().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADclSequenceDeclSequence(node);
    }

    public void inADeclDeclSequence(ADeclDeclSequence node)
    {
        defaultIn(node);
    }

    public void outADeclDeclSequence(ADeclDeclSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclDeclSequence(ADeclDeclSequence node)
    {
        inADeclDeclSequence(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADeclDeclSequence(node);
    }

    public void inACmdSequenceCmdSequence(ACmdSequenceCmdSequence node)
    {
        defaultIn(node);
    }

    public void outACmdSequenceCmdSequence(ACmdSequenceCmdSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmdSequenceCmdSequence(ACmdSequenceCmdSequence node)
    {
        inACmdSequenceCmdSequence(node);
        if(node.getCmdSequence() != null)
        {
            node.getCmdSequence().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outACmdSequenceCmdSequence(node);
    }

    public void inACmdCmdSequence(ACmdCmdSequence node)
    {
        defaultIn(node);
    }

    public void outACmdCmdSequence(ACmdCmdSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmdCmdSequence(ACmdCmdSequence node)
    {
        inACmdCmdSequence(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outACmdCmdSequence(node);
    }

    public void inAVarSequenceVarSequence(AVarSequenceVarSequence node)
    {
        defaultIn(node);
    }

    public void outAVarSequenceVarSequence(AVarSequenceVarSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSequenceVarSequence(AVarSequenceVarSequence node)
    {
        inAVarSequenceVarSequence(node);
        if(node.getVarSequence() != null)
        {
            node.getVarSequence().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarSequenceVarSequence(node);
    }

    public void inAVarVarSequence(AVarVarSequence node)
    {
        defaultIn(node);
    }

    public void outAVarVarSequence(AVarVarSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVarSequence(AVarVarSequence node)
    {
        inAVarVarSequence(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarVarSequence(node);
    }

    public void inASequenceExpSequence(ASequenceExpSequence node)
    {
        defaultIn(node);
    }

    public void outASequenceExpSequence(ASequenceExpSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceExpSequence(ASequenceExpSequence node)
    {
        inASequenceExpSequence(node);
        if(node.getExpSequence() != null)
        {
            node.getExpSequence().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASequenceExpSequence(node);
    }

    public void inAExpExpSequence(AExpExpSequence node)
    {
        defaultIn(node);
    }

    public void outAExpExpSequence(AExpExpSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExpSequence(AExpExpSequence node)
    {
        inAExpExpSequence(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpExpSequence(node);
    }

    public void inAOptionsCaseSequence(AOptionsCaseSequence node)
    {
        defaultIn(node);
    }

    public void outAOptionsCaseSequence(AOptionsCaseSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOptionsCaseSequence(AOptionsCaseSequence node)
    {
        inAOptionsCaseSequence(node);
        if(node.getCaseSequence() != null)
        {
            node.getCaseSequence().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outAOptionsCaseSequence(node);
    }

    public void inACaseCaseSequence(ACaseCaseSequence node)
    {
        defaultIn(node);
    }

    public void outACaseCaseSequence(ACaseCaseSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseCaseSequence(ACaseCaseSequence node)
    {
        inACaseCaseSequence(node);
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outACaseCaseSequence(node);
    }
}
