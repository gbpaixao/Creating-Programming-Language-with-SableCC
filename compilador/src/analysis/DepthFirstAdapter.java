/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAStart(node);
    }

    public void inAVarDeclaracao(AVarDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVarDeclaracao(AVarDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclaracao(AVarDeclaracao node)
    {
        inAVarDeclaracao(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outAVarDeclaracao(node);
    }

    public void inAConstDeclaracao(AConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracao(AConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        inAConstDeclaracao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAConstDeclaracao(node);
    }

    public void inAFloatTipo(AFloatTipo node)
    {
        defaultIn(node);
    }

    public void outAFloatTipo(AFloatTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatTipo(AFloatTipo node)
    {
        inAFloatTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outAFloatTipo(node);
    }

    public void inAIntTipo(AIntTipo node)
    {
        defaultIn(node);
    }

    public void outAIntTipo(AIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipo(AIntTipo node)
    {
        inAIntTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAIntTipo(node);
    }

    public void inACharTipo(ACharTipo node)
    {
        defaultIn(node);
    }

    public void outACharTipo(ACharTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharTipo(ACharTipo node)
    {
        inACharTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACharTipo(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAVetorVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAIntValor(AIntValor node)
    {
        defaultIn(node);
    }

    public void outAIntValor(AIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValor(AIntValor node)
    {
        inAIntValor(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntValor(node);
    }

    public void inAFloatValor(AFloatValor node)
    {
        defaultIn(node);
    }

    public void outAFloatValor(AFloatValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatValor(AFloatValor node)
    {
        inAFloatValor(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatValor(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outALeiaComando(node);
    }

    public void inAEscrevaComando(AEscrevaComando node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComando(AEscrevaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComando(AEscrevaComando node)
    {
        inAEscrevaComando(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getExp());
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outAEscrevaComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outASeComando(node);
    }

    public void inASeElseComando(ASeElseComando node)
    {
        defaultIn(node);
    }

    public void outASeElseComando(ASeElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeElseComando(ASeElseComando node)
    {
        inASeElseComando(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIfElse() != null)
        {
            node.getIfElse().apply(this);
        }
        outASeElseComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PCase> copy = new ArrayList<PCase>(node.getCase());
            for(PCase e : copy)
            {
                e.apply(this);
            }
        }
        outAAvalieComando(node);
    }

    public void inAAvalieElseComando(AAvalieElseComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieElseComando(AAvalieElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieElseComando(AAvalieElseComando node)
    {
        inAAvalieElseComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PCase> copy = new ArrayList<PCase>(node.getCase());
            for(PCase e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCaseElse() != null)
        {
            node.getCaseElse().apply(this);
        }
        outAAvalieElseComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAEnquantoComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAParaComando(node);
    }

    public void inAParaPassoComando(AParaPassoComando node)
    {
        defaultIn(node);
    }

    public void outAParaPassoComando(AParaPassoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaPassoComando(AParaPassoComando node)
    {
        inAParaPassoComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getM() != null)
        {
            node.getM().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAParaPassoComando(node);
    }

    public void inAIfElse(AIfElse node)
    {
        defaultIn(node);
    }

    public void outAIfElse(AIfElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElse(AIfElse node)
    {
        inAIfElse(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAIfElse(node);
    }

    public void inACase(ACase node)
    {
        defaultIn(node);
    }

    public void outACase(ACase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACase(ACase node)
    {
        inACase(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outACase(node);
    }

    public void inACaseElse(ACaseElse node)
    {
        defaultIn(node);
    }

    public void outACaseElse(ACaseElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseElse(ACaseElse node)
    {
        inACaseElse(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outACaseElse(node);
    }

    public void inAValorExp(AValorExp node)
    {
        defaultIn(node);
    }

    public void outAValorExp(AValorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExp(AValorExp node)
    {
        inAValorExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExp(node);
    }

    public void inAParentesesExp(AParentesesExp node)
    {
        defaultIn(node);
    }

    public void outAParentesesExp(AParentesesExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesExp(AParentesesExp node)
    {
        inAParentesesExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAParentesesExp(node);
    }

    public void inAMenosExp(AMenosExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExp(AMenosExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExp(AMenosExp node)
    {
        inAMenosExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMenosExp(node);
    }

    public void inAOpSumExp(AOpSumExp node)
    {
        defaultIn(node);
    }

    public void outAOpSumExp(AOpSumExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpSumExp(AOpSumExp node)
    {
        inAOpSumExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpSumExp(node);
    }

    public void inAOpSubExp(AOpSubExp node)
    {
        defaultIn(node);
    }

    public void outAOpSubExp(AOpSubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpSubExp(AOpSubExp node)
    {
        inAOpSubExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpSubExp(node);
    }

    public void inAOpMultExp(AOpMultExp node)
    {
        defaultIn(node);
    }

    public void outAOpMultExp(AOpMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMultExp(AOpMultExp node)
    {
        inAOpMultExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpMultExp(node);
    }

    public void inAOpDivExp(AOpDivExp node)
    {
        defaultIn(node);
    }

    public void outAOpDivExp(AOpDivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpDivExp(AOpDivExp node)
    {
        inAOpDivExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpDivExp(node);
    }

    public void inAParentesesExpLogica(AParentesesExpLogica node)
    {
        defaultIn(node);
    }

    public void outAParentesesExpLogica(AParentesesExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesExpLogica(AParentesesExpLogica node)
    {
        inAParentesesExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAParentesesExpLogica(node);
    }

    public void inAOpIgualExpLogica(AOpIgualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOpIgualExpLogica(AOpIgualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpIgualExpLogica(AOpIgualExpLogica node)
    {
        inAOpIgualExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpIgualExpLogica(node);
    }

    public void inAOpDifExpLogica(AOpDifExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOpDifExpLogica(AOpDifExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpDifExpLogica(AOpDifExpLogica node)
    {
        inAOpDifExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpDifExpLogica(node);
    }

    public void inAOpMaiorExpLogica(AOpMaiorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOpMaiorExpLogica(AOpMaiorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMaiorExpLogica(AOpMaiorExpLogica node)
    {
        inAOpMaiorExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpMaiorExpLogica(node);
    }

    public void inAOpMenorExpLogica(AOpMenorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOpMenorExpLogica(AOpMenorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMenorExpLogica(AOpMenorExpLogica node)
    {
        inAOpMenorExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpMenorExpLogica(node);
    }

    public void inAOpMaiorIgualExpLogica(AOpMaiorIgualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOpMaiorIgualExpLogica(AOpMaiorIgualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMaiorIgualExpLogica(AOpMaiorIgualExpLogica node)
    {
        inAOpMaiorIgualExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpMaiorIgualExpLogica(node);
    }

    public void inAOpMenorIgualExpLogica(AOpMenorIgualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOpMenorIgualExpLogica(AOpMenorIgualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMenorIgualExpLogica(AOpMenorIgualExpLogica node)
    {
        inAOpMenorIgualExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpMenorIgualExpLogica(node);
    }

    public void inANaoExpLogica(ANaoExpLogica node)
    {
        defaultIn(node);
    }

    public void outANaoExpLogica(ANaoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExpLogica(ANaoExpLogica node)
    {
        inANaoExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outANaoExpLogica(node);
    }

    public void inAEExpLogica(AEExpLogica node)
    {
        defaultIn(node);
    }

    public void outAEExpLogica(AEExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExpLogica(AEExpLogica node)
    {
        inAEExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEExpLogica(node);
    }

    public void inAOuExpLogica(AOuExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOuExpLogica(AOuExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpLogica(AOuExpLogica node)
    {
        inAOuExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOuExpLogica(node);
    }

    public void inAXorExpLogica(AXorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAXorExpLogica(AXorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExpLogica(AXorExpLogica node)
    {
        inAXorExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAXorExpLogica(node);
    }

    public void inAValorExpAux(AValorExpAux node)
    {
        defaultIn(node);
    }

    public void outAValorExpAux(AValorExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExpAux(AValorExpAux node)
    {
        inAValorExpAux(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExpAux(node);
    }

    public void inAVarExpAux(AVarExpAux node)
    {
        defaultIn(node);
    }

    public void outAVarExpAux(AVarExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpAux(AVarExpAux node)
    {
        inAVarExpAux(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExpAux(node);
    }

    public void inAParentesesExpAux(AParentesesExpAux node)
    {
        defaultIn(node);
    }

    public void outAParentesesExpAux(AParentesesExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesExpAux(AParentesesExpAux node)
    {
        inAParentesesExpAux(node);
        if(node.getExpAux() != null)
        {
            node.getExpAux().apply(this);
        }
        outAParentesesExpAux(node);
    }

    public void inAMenosExpAux(AMenosExpAux node)
    {
        defaultIn(node);
    }

    public void outAMenosExpAux(AMenosExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpAux(AMenosExpAux node)
    {
        inAMenosExpAux(node);
        if(node.getExpAux() != null)
        {
            node.getExpAux().apply(this);
        }
        outAMenosExpAux(node);
    }

    public void inAOpSumExpAux(AOpSumExpAux node)
    {
        defaultIn(node);
    }

    public void outAOpSumExpAux(AOpSumExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpSumExpAux(AOpSumExpAux node)
    {
        inAOpSumExpAux(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpSumExpAux(node);
    }

    public void inAOpSubExpAux(AOpSubExpAux node)
    {
        defaultIn(node);
    }

    public void outAOpSubExpAux(AOpSubExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpSubExpAux(AOpSubExpAux node)
    {
        inAOpSubExpAux(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpSubExpAux(node);
    }

    public void inAOpMultExpAux(AOpMultExpAux node)
    {
        defaultIn(node);
    }

    public void outAOpMultExpAux(AOpMultExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMultExpAux(AOpMultExpAux node)
    {
        inAOpMultExpAux(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpMultExpAux(node);
    }

    public void inAOpDivExpAux(AOpDivExpAux node)
    {
        defaultIn(node);
    }

    public void outAOpDivExpAux(AOpDivExpAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpDivExpAux(AOpDivExpAux node)
    {
        inAOpDivExpAux(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpDivExpAux(node);
    }
}
