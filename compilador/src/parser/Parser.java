/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AStartStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ADclSequenceDeclSequence */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce ADeclDeclSequence */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AVarDeclaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AConstDeclaracao */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AFloatTipo */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AIntTipo */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ACharTipo */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AIdVar */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AVetorVar */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AVarSequenceVarSequence */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce AVarVarSequence */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce AStringValor */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce AIntValor */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce AFloatValor */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce AAtribuicaoComando */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list);
            }
            break;
            case 16: /* reduce ALeiaComando */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce AEscrevaComando */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce ASeComando */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce ASeElseComando */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AAvalieComando */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AAvalieElseComando */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list);
            }
            break;
            case 22: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list);
            }
            break;
            case 23: /* reduce ARepitaComando */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list);
            }
            break;
            case 24: /* reduce AParaComando */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list);
            }
            break;
            case 25: /* reduce AParaPassoComando */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list);
            }
            break;
            case 26: /* reduce ACmdSequenceCmdSequence */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce ACmdCmdSequence */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AIfElse */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list);
            }
            break;
            case 29: /* reduce ACase */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list);
            }
            break;
            case 30: /* reduce AOptionsCaseSequence */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list);
            }
            break;
            case 31: /* reduce ACaseCaseSequence */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list);
            }
            break;
            case 32: /* reduce ACaseElse */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AOpSumExp */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list);
            }
            break;
            case 34: /* reduce AOpSubExp */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list);
            }
            break;
            case 35: /* reduce ATermoExp */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AOpMultTermo */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce AOpDivTermo */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce AParentesesFator */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list);
            }
            break;
            case 40: /* reduce AValorFator */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce AVarFator */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list);
            }
            break;
            case 42: /* reduce AMenosFator */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce ASequenceExpSequence */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list);
            }
            break;
            case 44: /* reduce AExpExpSequence */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce AOuExpLogica */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list);
            }
            break;
            case 46: /* reduce ATermo1ExpLogica */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list);
            }
            break;
            case 47: /* reduce AXorTermo1 */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list);
            }
            break;
            case 48: /* reduce ATermo2Termo1 */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list);
            }
            break;
            case 49: /* reduce AETermo2 */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list);
            }
            break;
            case 50: /* reduce ATermo3Termo2 */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list);
            }
            break;
            case 51: /* reduce ATermo5Elemento1 */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list);
            }
            break;
            case 52: /* reduce ATermo3Elemento1 */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list);
            }
            break;
            case 53: /* reduce ANaoTermo5 */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list);
            }
            break;
            case 54: /* reduce ATermo6Termo5 */
            {
                ArrayList<Object> list = new54();
                push(goTo(21), list);
            }
            break;
            case 55: /* reduce AParentesesTermo6 */
            {
                ArrayList<Object> list = new55();
                push(goTo(22), list);
            }
            break;
            case 56: /* reduce AOpIgualTermo3 */
            {
                ArrayList<Object> list = new56();
                push(goTo(23), list);
            }
            break;
            case 57: /* reduce AOpDifTermo3 */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list);
            }
            break;
            case 58: /* reduce ATermo4Termo3 */
            {
                ArrayList<Object> list = new58();
                push(goTo(23), list);
            }
            break;
            case 59: /* reduce AOpMaiorTermo4 */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list);
            }
            break;
            case 60: /* reduce AOpMenorTermo4 */
            {
                ArrayList<Object> list = new60();
                push(goTo(24), list);
            }
            break;
            case 61: /* reduce AOpMaiorIgualTermo4 */
            {
                ArrayList<Object> list = new61();
                push(goTo(24), list);
            }
            break;
            case 62: /* reduce AOpMenorIgualTermo4 */
            {
                ArrayList<Object> list = new62();
                push(goTo(24), list);
            }
            break;
            case 63: /* reduce AOpSumExpAux */
            {
                ArrayList<Object> list = new63();
                push(goTo(25), list);
            }
            break;
            case 64: /* reduce AOpSubExpAux */
            {
                ArrayList<Object> list = new64();
                push(goTo(25), list);
            }
            break;
            case 65: /* reduce ATermoExpAux */
            {
                ArrayList<Object> list = new65();
                push(goTo(25), list);
            }
            break;
            case 66: /* reduce AOpMultTermoAux */
            {
                ArrayList<Object> list = new66();
                push(goTo(26), list);
            }
            break;
            case 67: /* reduce AOpDivTermoAux */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list);
            }
            break;
            case 68: /* reduce AFatorTermoAux */
            {
                ArrayList<Object> list = new68();
                push(goTo(26), list);
            }
            break;
            case 69: /* reduce AValorFatorAux */
            {
                ArrayList<Object> list = new69();
                push(goTo(27), list);
            }
            break;
            case 70: /* reduce AVarFatorAux */
            {
                ArrayList<Object> list = new70();
                push(goTo(27), list);
            }
            break;
            case 71: /* reduce AMenosFatorAux */
            {
                ArrayList<Object> list = new71();
                push(goTo(27), list);
            }
            break;
            case 72: /* reduce AParentesesFatorAux */
            {
                ArrayList<Object> list = new72();
                push(goTo(27), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AStartStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstartNode1 = new AStart(tidNode2, listNode4, listNode6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ADclSequenceDeclSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADeclDeclSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVarDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdeclaracaoNode1 = new AVarDeclaracao(ptipoNode2, listNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AConstDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TId tidNode2;
        PValor pvalorNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstDeclaracao(tidNode2, pvalorNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AFloatTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new AFloatTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AIntTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AIntTipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ACharTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACharTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVetorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TInt tintNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tintNode3 = (TInt)nodeArrayList3.get(0);

        pvarNode1 = new AVetorVar(tidNode2, tintNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AVarSequenceVarSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVar pvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarNode2 = (PVar)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarNode2 != null)
	{
	  listNode3.add(pvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVarVarSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVar pvarNode1;
        pvarNode1 = (PVar)nodeArrayList1.get(0);
	if(pvarNode1 != null)
	{
	  listNode2.add(pvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pvalorNode1 = new AIntValor(tintNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AFloatValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        pvalorNode1 = new AFloatValor(tfloatNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoComando(pvarNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ALeiaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcomandoNode1 = new ALeiaComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AEscrevaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcomandoNode1 = new AEscrevaComando(listNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ASeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new ASeComando(pexplogicaNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASeElseComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PIfElse pifelseNode5;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pifelseNode5 = (PIfElse)nodeArrayList7.get(0);

        pcomandoNode1 = new ASeElseComando(pexplogicaNode2, listNode4, pifelseNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAvalieComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new AAvalieComando(pexpNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAvalieElseComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PCaseElse pcaseelseNode5;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pcaseelseNode5 = (PCaseElse)nodeArrayList6.get(0);

        pcomandoNode1 = new AAvalieElseComando(pexpNode2, listNode4, pcaseelseNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoNode1 = new AEnquantoComando(pexplogicaNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ARepitaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpLogica pexplogicaNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexplogicaNode4 = (PExpLogica)nodeArrayList5.get(0);

        pcomandoNode1 = new ARepitaComando(listNode3, pexplogicaNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AParaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TInt tintNode3;
        TInt tintNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tintNode3 = (TInt)nodeArrayList4.get(0);
        tintNode4 = (TInt)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcomandoNode1 = new AParaComando(pvarNode2, tintNode3, tintNode4, listNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AParaPassoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TInt tintNode3;
        TInt tintNode4;
        TInt tintNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tintNode3 = (TInt)nodeArrayList4.get(0);
        tintNode4 = (TInt)nodeArrayList6.get(0);
        tintNode5 = (TInt)nodeArrayList8.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList10.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pcomandoNode1 = new AParaPassoComando(pvarNode2, tintNode3, tintNode4, tintNode5, listNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ACmdSequenceCmdSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ACmdCmdSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AIfElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfElse pifelseNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pifelseNode1 = new AIfElse(listNode3);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ACase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCase pcaseNode1;
        {
            // Block
        PValor pvalorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvalorNode2 = (PValor)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcaseNode1 = new ACase(pvalorNode2, listNode4);
        }
	nodeList.add(pcaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AOptionsCaseSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCase pcaseNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcaseNode2 = (PCase)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcaseNode2 != null)
	{
	  listNode3.add(pcaseNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ACaseCaseSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCase pcaseNode1;
        pcaseNode1 = (PCase)nodeArrayList1.get(0);
	if(pcaseNode1 != null)
	{
	  listNode2.add(pcaseNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ACaseElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCaseElse pcaseelseNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcaseelseNode1 = new ACaseElse(listNode3);
        }
	nodeList.add(pcaseelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AOpSumExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOpSumExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AOpSubExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOpSubExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ATermoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AOpMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOpMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AOpDivTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOpDivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AParentesesFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AParentesesExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AValorFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpNode1 = new AValorExp(pvalorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AVarFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpNode1 = new AVarExp(pvarNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMenosFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AMenosExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ASequenceExpSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExpExpSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AOuExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOuExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ATermo1ExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AXorTermo1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AXorExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ATermo2Termo1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AETermo2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AEExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ATermo3Termo2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ATermo5Elemento1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ATermo3Elemento1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANaoTermo5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new ANaoExpLogica(pexplogicaNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ATermo6Termo5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AParentesesTermo6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new AParentesesExpLogica(pexplogicaNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AOpIgualTermo3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        PExpAux pexpauxNode3;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOpIgualExpLogica(pexpauxNode2, pexpauxNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AOpDifTermo3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        PExpAux pexpauxNode3;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOpDifExpLogica(pexpauxNode2, pexpauxNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ATermo4Termo3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AOpMaiorTermo4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        PExpAux pexpauxNode3;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOpMaiorExpLogica(pexpauxNode2, pexpauxNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AOpMenorTermo4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        PExpAux pexpauxNode3;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOpMenorExpLogica(pexpauxNode2, pexpauxNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AOpMaiorIgualTermo4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        PExpAux pexpauxNode3;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOpMaiorIgualExpLogica(pexpauxNode2, pexpauxNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AOpMenorIgualTermo4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        PExpAux pexpauxNode3;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOpMenorIgualExpLogica(pexpauxNode2, pexpauxNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AOpSumExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        PExpAux pexpauxNode3;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList3.get(0);

        pexpauxNode1 = new AOpSumExpAux(pexpauxNode2, pexpauxNode3);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AOpSubExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        PExpAux pexpauxNode3;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList3.get(0);

        pexpauxNode1 = new AOpSubExpAux(pexpauxNode2, pexpauxNode3);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ATermoExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        pexpauxNode1 = (PExpAux)nodeArrayList1.get(0);
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AOpMultTermoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        PExpAux pexpauxNode3;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList3.get(0);

        pexpauxNode1 = new AOpMultExpAux(pexpauxNode2, pexpauxNode3);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AOpDivTermoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        PExpAux pexpauxNode3;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList3.get(0);

        pexpauxNode1 = new AOpDivExpAux(pexpauxNode2, pexpauxNode3);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AFatorTermoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        pexpauxNode1 = (PExpAux)nodeArrayList1.get(0);
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AValorFatorAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpauxNode1 = new AValorExpAux(pvalorNode2);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AVarFatorAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpauxNode1 = new AVarExpAux(pvarNode2);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AMenosFatorAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        pexpauxNode2 = (PExpAux)nodeArrayList2.get(0);

        pexpauxNode1 = new AMenosExpAux(pexpauxNode2);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AParentesesFatorAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        pexpauxNode2 = (PExpAux)nodeArrayList2.get(0);

        pexpauxNode1 = new AParentesesExpAux(pexpauxNode2);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {22, SHIFT, 1}, },
			{{-1, ERROR, 1}, {51, SHIFT, 3}, },
			{{-1, ERROR, 2}, {57, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {17, SHIFT, 4}, },
			{{-1, ERROR, 4}, {3, SHIFT, 5}, {5, SHIFT, 6}, {18, SHIFT, 7}, {23, SHIFT, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 6}, {51, SHIFT, 12}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 9}, {0, SHIFT, 13}, {3, SHIFT, 5}, {5, SHIFT, 6}, {8, SHIFT, 14}, {9, SHIFT, 15}, {18, SHIFT, 7}, {19, SHIFT, 16}, {20, SHIFT, 17}, {23, SHIFT, 8}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 11}, {30, SHIFT, 25}, },
			{{-1, ERROR, 12}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 13}, {29, SHIFT, 30}, },
			{{-1, ERROR, 14}, {29, SHIFT, 31}, },
			{{-1, ERROR, 15}, {29, SHIFT, 32}, },
			{{-1, ERROR, 16}, {29, SHIFT, 33}, },
			{{-1, ERROR, 17}, {51, SHIFT, 20}, },
			{{-1, ERROR, 18}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 19}, {29, SHIFT, 36}, },
			{{-1, REDUCE, 8}, {28, SHIFT, 37}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 22}, {31, SHIFT, 38}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 24}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {12, SHIFT, 39}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 25}, {51, SHIFT, 20}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 29}, {34, SHIFT, 43}, },
			{{-1, ERROR, 30}, {29, SHIFT, 44}, {37, SHIFT, 45}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 31}, {29, SHIFT, 51}, {37, SHIFT, 52}, {47, SHIFT, 53}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 32}, {29, SHIFT, 44}, {37, SHIFT, 45}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 33}, {51, SHIFT, 20}, },
			{{-1, ERROR, 34}, {6, SHIFT, 70}, },
			{{-1, ERROR, 35}, {0, SHIFT, 13}, {1, SHIFT, 71}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 36}, {29, SHIFT, 51}, {37, SHIFT, 52}, {47, SHIFT, 53}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 37}, {52, SHIFT, 73}, },
			{{-1, ERROR, 38}, {29, SHIFT, 44}, {37, SHIFT, 45}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 42}, {34, SHIFT, 75}, {35, SHIFT, 76}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 44}, {29, SHIFT, 44}, {37, SHIFT, 45}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 45}, {29, SHIFT, 44}, {37, SHIFT, 45}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 48}, {33, SHIFT, 79}, {36, SHIFT, 80}, {37, SHIFT, 81}, },
			{{-1, REDUCE, 35}, {38, SHIFT, 82}, {39, SHIFT, 83}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 51}, {29, SHIFT, 51}, {37, SHIFT, 52}, {47, SHIFT, 53}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 52}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 53}, {29, SHIFT, 88}, {47, SHIFT, 53}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 56}, {33, SHIFT, 90}, {49, SHIFT, 91}, },
			{{-1, REDUCE, 46}, {50, SHIFT, 92}, },
			{{-1, REDUCE, 48}, {48, SHIFT, 93}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 64}, {36, SHIFT, 94}, {37, SHIFT, 95}, {41, SHIFT, 96}, {42, SHIFT, 97}, {43, SHIFT, 98}, {44, SHIFT, 99}, {45, SHIFT, 100}, {46, SHIFT, 101}, },
			{{-1, REDUCE, 65}, {38, SHIFT, 102}, {39, SHIFT, 103}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 44}, {36, SHIFT, 80}, {37, SHIFT, 81}, },
			{{-1, ERROR, 68}, {33, SHIFT, 104}, {35, SHIFT, 105}, },
			{{-1, ERROR, 69}, {33, SHIFT, 106}, {35, SHIFT, 76}, },
			{{-1, ERROR, 70}, {52, SHIFT, 107}, },
			{{-1, ERROR, 71}, {29, SHIFT, 108}, },
			{{-1, ERROR, 72}, {33, SHIFT, 109}, {49, SHIFT, 91}, },
			{{-1, ERROR, 73}, {32, SHIFT, 110}, },
			{{-1, ERROR, 74}, {34, SHIFT, 111}, {36, SHIFT, 80}, {37, SHIFT, 81}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 76}, {51, SHIFT, 20}, },
			{{-1, ERROR, 77}, {33, SHIFT, 113}, {36, SHIFT, 80}, {37, SHIFT, 81}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 79}, {4, SHIFT, 114}, },
			{{-1, ERROR, 80}, {29, SHIFT, 44}, {37, SHIFT, 45}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 81}, {29, SHIFT, 44}, {37, SHIFT, 45}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 82}, {29, SHIFT, 44}, {37, SHIFT, 45}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 83}, {29, SHIFT, 44}, {37, SHIFT, 45}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 84}, {33, SHIFT, 121}, {49, SHIFT, 91}, },
			{{-1, ERROR, 85}, {33, SHIFT, 122}, {36, SHIFT, 94}, {37, SHIFT, 95}, {41, SHIFT, 96}, {42, SHIFT, 97}, {43, SHIFT, 98}, {44, SHIFT, 99}, {45, SHIFT, 100}, {46, SHIFT, 101}, },
			{{-1, ERROR, 86}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 88}, {29, SHIFT, 51}, {37, SHIFT, 52}, {47, SHIFT, 53}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 90}, {10, SHIFT, 124}, },
			{{-1, ERROR, 91}, {29, SHIFT, 51}, {37, SHIFT, 52}, {47, SHIFT, 53}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 92}, {29, SHIFT, 51}, {37, SHIFT, 52}, {47, SHIFT, 53}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 93}, {29, SHIFT, 51}, {37, SHIFT, 52}, {47, SHIFT, 53}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 94}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 95}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 96}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 97}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 98}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 99}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 100}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 101}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 102}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 103}, {29, SHIFT, 86}, {37, SHIFT, 52}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 104}, {34, SHIFT, 138}, },
			{{-1, ERROR, 105}, {29, SHIFT, 44}, {37, SHIFT, 45}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 106}, {34, SHIFT, 140}, },
			{{-1, ERROR, 107}, {1, SHIFT, 141}, {21, SHIFT, 142}, },
			{{-1, ERROR, 108}, {29, SHIFT, 51}, {37, SHIFT, 52}, {47, SHIFT, 53}, {51, SHIFT, 20}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, ERROR, 109}, {7, SHIFT, 144}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 114}, {52, SHIFT, 26}, {53, SHIFT, 27}, {54, SHIFT, 28}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 116}, {4, SHIFT, 114}, {13, SHIFT, 146}, {26, SHIFT, 147}, },
			{{-1, REDUCE, 33}, {38, SHIFT, 82}, {39, SHIFT, 83}, },
			{{-1, REDUCE, 34}, {38, SHIFT, 82}, {39, SHIFT, 83}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 123}, {33, SHIFT, 122}, {36, SHIFT, 94}, {37, SHIFT, 95}, },
			{{-1, ERROR, 124}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, REDUCE, 45}, {50, SHIFT, 92}, },
			{{-1, REDUCE, 47}, {48, SHIFT, 93}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 63}, {38, SHIFT, 102}, {39, SHIFT, 103}, },
			{{-1, REDUCE, 64}, {38, SHIFT, 102}, {39, SHIFT, 103}, },
			{{-1, REDUCE, 56}, {36, SHIFT, 94}, {37, SHIFT, 95}, },
			{{-1, REDUCE, 57}, {36, SHIFT, 94}, {37, SHIFT, 95}, },
			{{-1, REDUCE, 59}, {36, SHIFT, 94}, {37, SHIFT, 95}, },
			{{-1, REDUCE, 60}, {36, SHIFT, 94}, {37, SHIFT, 95}, },
			{{-1, REDUCE, 61}, {36, SHIFT, 94}, {37, SHIFT, 95}, },
			{{-1, REDUCE, 62}, {36, SHIFT, 94}, {37, SHIFT, 95}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 43}, {36, SHIFT, 80}, {37, SHIFT, 81}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 141}, {52, SHIFT, 151}, },
			{{-1, ERROR, 142}, {52, SHIFT, 152}, },
			{{-1, ERROR, 143}, {33, SHIFT, 153}, {49, SHIFT, 91}, },
			{{-1, ERROR, 144}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 145}, {30, SHIFT, 155}, },
			{{-1, ERROR, 146}, {34, SHIFT, 156}, },
			{{-1, ERROR, 147}, {30, SHIFT, 157}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 149}, {13, SHIFT, 158}, },
			{{-1, ERROR, 150}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {14, SHIFT, 159}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 151}, {10, SHIFT, 160}, },
			{{-1, ERROR, 152}, {1, SHIFT, 161}, },
			{{-1, ERROR, 153}, {34, SHIFT, 162}, },
			{{-1, ERROR, 154}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {16, SHIFT, 163}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {26, SHIFT, 164}, {51, SHIFT, 20}, },
			{{-1, ERROR, 155}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 157}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 158}, {34, SHIFT, 168}, },
			{{-1, ERROR, 159}, {34, SHIFT, 169}, },
			{{-1, ERROR, 160}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 161}, {52, SHIFT, 171}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 163}, {34, SHIFT, 172}, },
			{{-1, ERROR, 164}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 165}, {16, SHIFT, 174}, },
			{{-1, REDUCE, 29}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, REDUCE, 32}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 170}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {15, SHIFT, 175}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 171}, {10, SHIFT, 176}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 28}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 174}, {34, SHIFT, 177}, },
			{{-1, ERROR, 175}, {34, SHIFT, 178}, },
			{{-1, ERROR, 176}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 179}, {0, SHIFT, 13}, {8, SHIFT, 14}, {9, SHIFT, 15}, {15, SHIFT, 180}, {19, SHIFT, 16}, {20, SHIFT, 17}, {24, SHIFT, 18}, {25, SHIFT, 19}, {51, SHIFT, 20}, },
			{{-1, ERROR, 180}, {34, SHIFT, 181}, },
			{{-1, REDUCE, 25}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 9}, },
			{{-1, 10}, {9, 21}, },
			{{-1, 11}, },
			{{-1, 54}, {9, 22}, {17, 34}, {18, 22}, {24, 22}, {25, 41}, {30, 46}, {32, 46}, {33, 41}, {35, 22}, {38, 46}, {44, 46}, {45, 46}, {76, 112}, {80, 46}, {81, 46}, {82, 46}, {83, 46}, {105, 46}, {124, 22}, {144, 22}, {150, 22}, {154, 22}, {155, 22}, {157, 22}, {160, 22}, {164, 22}, {166, 22}, {167, 22}, {170, 22}, {173, 22}, {176, 22}, {179, 22}, },
			{{-1, 42}, {33, 69}, },
			{{-1, 55}, {12, 29}, {30, 47}, {32, 47}, {38, 47}, {44, 47}, {45, 47}, {80, 47}, {81, 47}, {82, 47}, {83, 47}, {105, 47}, {114, 145}, },
			{{-1, 23}, {24, 40}, {35, 40}, {150, 40}, {154, 40}, {166, 40}, {167, 40}, {170, 40}, {173, 40}, {179, 40}, },
			{{-1, 24}, {18, 35}, {124, 150}, {144, 154}, {155, 166}, {157, 167}, {160, 170}, {164, 173}, {176, 179}, },
			{{-1, 165}, },
			{{-1, 115}, {116, 148}, },
			{{-1, 116}, },
			{{-1, 149}, },
			{{-1, 48}, {32, 67}, {38, 74}, {44, 77}, {105, 139}, },
			{{-1, 49}, {80, 117}, {81, 118}, },
			{{-1, 50}, {45, 78}, {82, 119}, {83, 120}, },
			{{-1, 68}, },
			{{-1, 84}, {31, 56}, {36, 72}, {108, 143}, },
			{{-1, 57}, {91, 125}, },
			{{-1, 58}, {92, 126}, },
			{{-1, 59}, {93, 127}, },
			{{-1, 60}, {53, 89}, },
			{{-1, 61}, },
			{{-1, 62}, },
			{{-1, 63}, },
			{{-1, 64}, {51, 85}, {86, 123}, {96, 130}, {97, 131}, {98, 132}, {99, 133}, {100, 134}, {101, 135}, },
			{{-1, 65}, {94, 128}, {95, 129}, },
			{{-1, 66}, {52, 87}, {102, 136}, {103, 137}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'caractere', 'const', 'inteiro', 'real'",
			"expecting: ':'",
			"expecting: 'avalie', 'caractere', 'const', 'enquanto', 'escreva', 'inteiro', 'leia', 'para', 'real', 'repita', 'se', id",
			"expecting: int, float, string",
			"expecting: '('",
			"expecting: 'avalie', 'enquanto', 'escreva', 'leia', 'para', 'repita', 'se', id",
			"expecting: 'de', '[', ':=', ')', ';', ',', '+', '-', '*', '/', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'xor'",
			"expecting: ':='",
			"expecting: 'avalie', 'ate', 'caso', 'enquanto', 'escreva', 'fim.', 'fim avalie', 'fim enquanto', 'fim para', 'fim se', 'leia', 'para', 'repita', 'se', 'senao', id",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim.', 'leia', 'para', 'repita', 'se', id",
			"expecting: ':', ')', ';', ',', '+', '-', '*', '/', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'xor'",
			"expecting: ';'",
			"expecting: '(', '-', id, int, float, string",
			"expecting: '(', '-', 'nao', id, int, float, string",
			"expecting: 'de'",
			"expecting: 'avalie', 'ate', 'enquanto', 'escreva', 'leia', 'para', 'repita', 'se', id",
			"expecting: int",
			"expecting: ')', ';', ','",
			"expecting: ';', ','",
			"expecting: ')', ';', ',', '+', '-', '*', '/'",
			"expecting: ')', '+', '-'",
			"expecting: '(', 'nao'",
			"expecting: ')', '+', '-', '*', '/', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'xor'",
			"expecting: ')', 'ou'",
			"expecting: ')', 'ou', 'xor'",
			"expecting: ')', 'e', 'ou', 'xor'",
			"expecting: '+', '-', '=', '<>', '>', '<', '>=', '<='",
			"expecting: ')', ',', '+', '-'",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: ';', '+', '-'",
			"expecting: 'caso'",
			"expecting: ')', '+', '-', '=', '<>', '>', '<', '>=', '<='",
			"expecting: 'faca'",
			"expecting: 'ate', 'passo'",
			"expecting: 'entao'",
			"expecting: 'de', ':=', ')', ';', ',', '+', '-', '*', '/', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'xor'",
			"expecting: 'caso', 'fim avalie', 'senao'",
			"expecting: ')', '+', '-', 'e', 'ou', 'xor'",
			"expecting: 'fim avalie'",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim enquanto', 'leia', 'para', 'repita', 'se', id",
			"expecting: 'ate'",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim se', 'leia', 'para', 'repita', 'se', 'senao', id",
			"expecting: 'fim se'",
			"expecting: 'avalie', 'caso', 'enquanto', 'escreva', 'fim avalie', 'leia', 'para', 'repita', 'se', 'senao', id",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim avalie', 'leia', 'para', 'repita', 'se', id",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim para', 'leia', 'para', 'repita', 'se', id",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim se', 'leia', 'para', 'repita', 'se', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 1, 5, 5, 6, 6, 5, 7, 8, 8, 8, 8, 1, 9, 8, 10, 6, 11, 12, 13, 1, 14, 14, 14, 15, 16, 17, 16, 1, 18, 19, 17, 20, 16, 2, 12, 21, 22, 6, 16, 16, 23, 23, 24, 23, 23, 17, 16, 25, 26, 26, 27, 28, 29, 29, 29, 29, 29, 29, 30, 26, 26, 31, 32, 32, 20, 8, 27, 33, 34, 6, 1, 24, 23, 35, 16, 16, 16, 16, 27, 36, 16, 26, 17, 29, 37, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 15, 38, 17, 39, 40, 12, 21, 23, 7, 41, 41, 23, 23, 23, 23, 29, 26, 24, 9, 28, 29, 29, 26, 26, 42, 42, 42, 42, 42, 42, 26, 26, 12, 31, 12, 20, 20, 27, 9, 5, 15, 5, 41, 43, 44, 37, 45, 15, 46, 9, 12, 9, 15, 15, 9, 20, 12, 15, 9, 47, 48, 49, 12, 12, 50, 37, 12, 51, 15, 15, 9, 12, 12, 50, 15, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
