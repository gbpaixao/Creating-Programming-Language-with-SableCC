/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AVarDeclaracao */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AConstDeclaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AFloatTipo */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AIntTipo */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ACharTipo */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AIdVar */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AVetorVar */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AStringValor */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AIntValor */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AFloatValor */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AAtribuicaoComando */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce ALeiaComando */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AEscrevaComando */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce ASeComando */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce ASeElseComando */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list, false);
            }
            break;
            case 16: /* reduce AAvalieComando */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce AAvalieElseComando */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list, false);
            }
            break;
            case 18: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list, false);
            }
            break;
            case 19: /* reduce ARepitaComando */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list, false);
            }
            break;
            case 20: /* reduce AParaComando */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list, false);
            }
            break;
            case 21: /* reduce AParaPassoComando */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list, false);
            }
            break;
            case 22: /* reduce AOpSumExp */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list, false);
            }
            break;
            case 23: /* reduce ATermoExp */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list, false);
            }
            break;
            case 24: /* reduce AOpMultTermo */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list, false);
            }
            break;
            case 25: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list, false);
            }
            break;
            case 26: /* reduce AParentesesFator */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list, false);
            }
            break;
            case 27: /* reduce AValorFator */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list, false);
            }
            break;
            case 28: /* reduce AVarFator */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list, false);
            }
            break;
            case 29: /* reduce AMenosFator */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list, false);
            }
            break;
            case 30: /* reduce AOuExpLogica */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list, false);
            }
            break;
            case 31: /* reduce ATermo1ExpLogica */
            {
                ArrayList<Object> list = new31();
                push(goTo(9), list, false);
            }
            break;
            case 32: /* reduce AXorTermo1 */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list, false);
            }
            break;
            case 33: /* reduce ATermo2Termo1 */
            {
                ArrayList<Object> list = new33();
                push(goTo(10), list, false);
            }
            break;
            case 34: /* reduce AETermo2 */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list, false);
            }
            break;
            case 35: /* reduce ATermo3Termo2 */
            {
                ArrayList<Object> list = new35();
                push(goTo(11), list, false);
            }
            break;
            case 36: /* reduce AElem5Elemento1 */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list, false);
            }
            break;
            case 37: /* reduce ATermo3Elemento1 */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list, false);
            }
            break;
            case 38: /* reduce AOpIgualTermo3 */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list, false);
            }
            break;
            case 39: /* reduce ATermo4Termo3 */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list, false);
            }
            break;
            case 40: /* reduce AOpCompTermo4 */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list, false);
            }
            break;
            case 41: /* reduce AExpAuxTermo7 */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list, false);
            }
            break;
            case 42: /* reduce ANaoTermo5 */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list, false);
            }
            break;
            case 43: /* reduce ATermo6Termo5 */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list, false);
            }
            break;
            case 44: /* reduce AParentesesTermo6 */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce AOpSumExpAux */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list, false);
            }
            break;
            case 46: /* reduce ATermoExpAux */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list, false);
            }
            break;
            case 47: /* reduce AOpMultTermoAux */
            {
                ArrayList<Object> list = new47();
                push(goTo(19), list, false);
            }
            break;
            case 48: /* reduce AFatorTermoAux */
            {
                ArrayList<Object> list = new48();
                push(goTo(19), list, false);
            }
            break;
            case 49: /* reduce AValorFatorAux */
            {
                ArrayList<Object> list = new49();
                push(goTo(20), list, false);
            }
            break;
            case 50: /* reduce AVarFatorAux */
            {
                ArrayList<Object> list = new50();
                push(goTo(20), list, false);
            }
            break;
            case 51: /* reduce AMenosFatorAux */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list, false);
            }
            break;
            case 52: /* reduce AParentesesFatorAux */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list, false);
            }
            break;
            case 53: /* reduce AMaisOpSum */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list, false);
            }
            break;
            case 54: /* reduce AMenosOpSum */
            {
                ArrayList<Object> list = new54();
                push(goTo(21), list, false);
            }
            break;
            case 55: /* reduce AVezesOpMult */
            {
                ArrayList<Object> list = new55();
                push(goTo(22), list, false);
            }
            break;
            case 56: /* reduce ADivididoOpMult */
            {
                ArrayList<Object> list = new56();
                push(goTo(22), list, false);
            }
            break;
            case 57: /* reduce AIgualdadeOpIgualdade */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list, false);
            }
            break;
            case 58: /* reduce ADiferencaOpIgualdade */
            {
                ArrayList<Object> list = new58();
                push(goTo(23), list, false);
            }
            break;
            case 59: /* reduce AMaiorOpComp */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list, false);
            }
            break;
            case 60: /* reduce AMenorOpComp */
            {
                ArrayList<Object> list = new60();
                push(goTo(24), list, false);
            }
            break;
            case 61: /* reduce AMaiorIgualOpComp */
            {
                ArrayList<Object> list = new61();
                push(goTo(24), list, false);
            }
            break;
            case 62: /* reduce AMenorIgualOpComp */
            {
                ArrayList<Object> list = new62();
                push(goTo(24), list, false);
            }
            break;
            case 63: /* reduce AXorOpRel */
            {
                ArrayList<Object> list = new63();
                push(goTo(25), list, false);
            }
            break;
            case 64: /* reduce AEOpRel */
            {
                ArrayList<Object> list = new64();
                push(goTo(25), list, false);
            }
            break;
            case 65: /* reduce AOuOpRel */
            {
                ArrayList<Object> list = new65();
                push(goTo(25), list, false);
            }
            break;
            case 66: /* reduce AIfElse */
            {
                ArrayList<Object> list = new66();
                push(goTo(26), list, false);
            }
            break;
            case 67: /* reduce ACase */
            {
                ArrayList<Object> list = new67();
                push(goTo(27), list, false);
            }
            break;
            case 68: /* reduce ACaseElse */
            {
                ArrayList<Object> list = new68();
                push(goTo(28), list, false);
            }
            break;
            case 69: /* reduce ANInt */
            {
                ArrayList<Object> list = new69();
                push(goTo(29), list, false);
            }
            break;
            case 70: /* reduce ANInt1 */
            {
                ArrayList<Object> list = new70();
                push(goTo(30), list, false);
            }
            break;
            case 71: /* reduce ATermo7Aux */
            {
                ArrayList<Object> list = new71();
                push(goTo(31), list, false);
            }
            break;
            case 72: /* reduce ADclSequenceDeclSequence */
            {
                ArrayList<Object> list = new72();
                push(goTo(32), list, false);
            }
            break;
            case 73: /* reduce ADeclDeclSequence */
            {
                ArrayList<Object> list = new73();
                push(goTo(32), list, false);
            }
            break;
            case 74: /* reduce ACmdSequenceCmdSequence */
            {
                ArrayList<Object> list = new74();
                push(goTo(33), list, false);
            }
            break;
            case 75: /* reduce ACmdCmdSequence */
            {
                ArrayList<Object> list = new75();
                push(goTo(33), list, false);
            }
            break;
            case 76: /* reduce AVarSequenceVarSequence */
            {
                ArrayList<Object> list = new76();
                push(goTo(34), list, false);
            }
            break;
            case 77: /* reduce AVarVarSequence */
            {
                ArrayList<Object> list = new77();
                push(goTo(34), list, false);
            }
            break;
            case 78: /* reduce ASequenceExpSequence */
            {
                ArrayList<Object> list = new78();
                push(goTo(35), list, false);
            }
            break;
            case 79: /* reduce AExpExpSequence */
            {
                ArrayList<Object> list = new79();
                push(goTo(35), list, false);
            }
            break;
            case 80: /* reduce AOptionsCaseSequence */
            {
                ArrayList<Object> list = new80();
                push(goTo(36), list, false);
            }
            break;
            case 81: /* reduce ACaseCaseSequence */
            {
                ArrayList<Object> list = new81();
                push(goTo(36), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        PDeclSequence pdeclsequenceNode5;
        PCmdSequence pcmdsequenceNode6;
        TFim tfimNode7;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        pdeclsequenceNode5 = (PDeclSequence)nodeArrayList4.get(0);
        pcmdsequenceNode6 = (PCmdSequence)nodeArrayList5.get(0);
        tfimNode7 = (TFim)nodeArrayList6.get(0);

        pstartNode1 = new AStart(tprogramaNode2, tidNode3, tinicioNode4, pdeclsequenceNode5, pcmdsequenceNode6, tfimNode7);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AVarDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoisPontos tdoispontosNode3;
        PVarSequence pvarsequenceNode4;
        TPontoVirgula tpontovirgulaNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        pvarsequenceNode4 = (PVarSequence)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AVarDeclaracao(ptipoNode2, tdoispontosNode3, pvarsequenceNode4, tpontovirgulaNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AConstDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TConstante tconstanteNode2;
        TId tidNode3;
        PValor pvalorNode4;
        TPontoVirgula tpontovirgulaNode5;
        tconstanteNode2 = (TConstante)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AConstDeclaracao(tconstanteNode2, tidNode3, pvalorNode4, tpontovirgulaNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AFloatTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new AFloatTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AIntTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AIntTipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ACharTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACharTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVetorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TAbreColchete tabrecolcheteNode3;
        TInt tintNode4;
        TFechaColchete tfechacolcheteNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tabrecolcheteNode3 = (TAbreColchete)nodeArrayList2.get(0);
        tintNode4 = (TInt)nodeArrayList3.get(0);
        tfechacolcheteNode5 = (TFechaColchete)nodeArrayList4.get(0);

        pvarNode1 = new AVetorVar(tidNode2, tabrecolcheteNode3, tintNode4, tfechacolcheteNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pvalorNode1 = new AIntValor(tintNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AFloatValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        pvalorNode1 = new AFloatValor(tfloatNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TDoisPontosIgual tdoispontosigualNode3;
        PExp pexpNode4;
        TPontoVirgula tpontovirgulaNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tdoispontosigualNode3 = (TDoisPontosIgual)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);

        pcomandoNode1 = new AAtribuicaoComando(pvarNode2, tdoispontosigualNode3, pexpNode4, tpontovirgulaNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ALeiaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TLeia tleiaNode2;
        TAbreParenteses tabreparentesesNode3;
        PVarSequence pvarsequenceNode4;
        TFechaParenteses tfechaparentesesNode5;
        TPontoVirgula tpontovirgulaNode6;
        tleiaNode2 = (TLeia)nodeArrayList1.get(0);
        tabreparentesesNode3 = (TAbreParenteses)nodeArrayList2.get(0);
        pvarsequenceNode4 = (PVarSequence)nodeArrayList3.get(0);
        tfechaparentesesNode5 = (TFechaParenteses)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);

        pcomandoNode1 = new ALeiaComando(tleiaNode2, tabreparentesesNode3, pvarsequenceNode4, tfechaparentesesNode5, tpontovirgulaNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AEscrevaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TEscreva tescrevaNode2;
        TAbreParenteses tabreparentesesNode3;
        PExpSequence pexpsequenceNode4;
        TFechaParenteses tfechaparentesesNode5;
        TPontoVirgula tpontovirgulaNode6;
        tescrevaNode2 = (TEscreva)nodeArrayList1.get(0);
        tabreparentesesNode3 = (TAbreParenteses)nodeArrayList2.get(0);
        pexpsequenceNode4 = (PExpSequence)nodeArrayList3.get(0);
        tfechaparentesesNode5 = (TFechaParenteses)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);

        pcomandoNode1 = new AEscrevaComando(tescrevaNode2, tabreparentesesNode3, pexpsequenceNode4, tfechaparentesesNode5, tpontovirgulaNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TSe tseNode2;
        TAbreParenteses tabreparentesesNode3;
        PExpLogica pexplogicaNode4;
        TFechaParenteses tfechaparentesesNode5;
        TEntao tentaoNode6;
        PCmdSequence pcmdsequenceNode7;
        TFimSe tfimseNode8;
        TPontoVirgula tpontovirgulaNode9;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tabreparentesesNode3 = (TAbreParenteses)nodeArrayList2.get(0);
        pexplogicaNode4 = (PExpLogica)nodeArrayList3.get(0);
        tfechaparentesesNode5 = (TFechaParenteses)nodeArrayList4.get(0);
        tentaoNode6 = (TEntao)nodeArrayList5.get(0);
        pcmdsequenceNode7 = (PCmdSequence)nodeArrayList6.get(0);
        tfimseNode8 = (TFimSe)nodeArrayList7.get(0);
        tpontovirgulaNode9 = (TPontoVirgula)nodeArrayList8.get(0);

        pcomandoNode1 = new ASeComando(tseNode2, tabreparentesesNode3, pexplogicaNode4, tfechaparentesesNode5, tentaoNode6, pcmdsequenceNode7, tfimseNode8, tpontovirgulaNode9);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ASeElseComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TSe tseNode2;
        TAbreParenteses tabreparentesesNode3;
        PExpLogica pexplogicaNode4;
        TFechaParenteses tfechaparentesesNode5;
        TEntao tentaoNode6;
        PCmdSequence pcmdsequenceNode7;
        PIfElse pifelseNode8;
        TFimSe tfimseNode9;
        TPontoVirgula tpontovirgulaNode10;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tabreparentesesNode3 = (TAbreParenteses)nodeArrayList2.get(0);
        pexplogicaNode4 = (PExpLogica)nodeArrayList3.get(0);
        tfechaparentesesNode5 = (TFechaParenteses)nodeArrayList4.get(0);
        tentaoNode6 = (TEntao)nodeArrayList5.get(0);
        pcmdsequenceNode7 = (PCmdSequence)nodeArrayList6.get(0);
        pifelseNode8 = (PIfElse)nodeArrayList7.get(0);
        tfimseNode9 = (TFimSe)nodeArrayList8.get(0);
        tpontovirgulaNode10 = (TPontoVirgula)nodeArrayList9.get(0);

        pcomandoNode1 = new ASeElseComando(tseNode2, tabreparentesesNode3, pexplogicaNode4, tfechaparentesesNode5, tentaoNode6, pcmdsequenceNode7, pifelseNode8, tfimseNode9, tpontovirgulaNode10);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAvalieComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TAvalie tavalieNode2;
        TAbreParenteses tabreparentesesNode3;
        PExp pexpNode4;
        TFechaParenteses tfechaparentesesNode5;
        PCaseSequence pcasesequenceNode6;
        TFimAvalie tfimavalieNode7;
        TPontoVirgula tpontovirgulaNode8;
        tavalieNode2 = (TAvalie)nodeArrayList1.get(0);
        tabreparentesesNode3 = (TAbreParenteses)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tfechaparentesesNode5 = (TFechaParenteses)nodeArrayList4.get(0);
        pcasesequenceNode6 = (PCaseSequence)nodeArrayList5.get(0);
        tfimavalieNode7 = (TFimAvalie)nodeArrayList6.get(0);
        tpontovirgulaNode8 = (TPontoVirgula)nodeArrayList7.get(0);

        pcomandoNode1 = new AAvalieComando(tavalieNode2, tabreparentesesNode3, pexpNode4, tfechaparentesesNode5, pcasesequenceNode6, tfimavalieNode7, tpontovirgulaNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAvalieElseComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TAvalie tavalieNode2;
        TAbreParenteses tabreparentesesNode3;
        PExp pexpNode4;
        TFechaParenteses tfechaparentesesNode5;
        PCaseSequence pcasesequenceNode6;
        PCaseElse pcaseelseNode7;
        TFimAvalie tfimavalieNode8;
        TPontoVirgula tpontovirgulaNode9;
        tavalieNode2 = (TAvalie)nodeArrayList1.get(0);
        tabreparentesesNode3 = (TAbreParenteses)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tfechaparentesesNode5 = (TFechaParenteses)nodeArrayList4.get(0);
        pcasesequenceNode6 = (PCaseSequence)nodeArrayList5.get(0);
        pcaseelseNode7 = (PCaseElse)nodeArrayList6.get(0);
        tfimavalieNode8 = (TFimAvalie)nodeArrayList7.get(0);
        tpontovirgulaNode9 = (TPontoVirgula)nodeArrayList8.get(0);

        pcomandoNode1 = new AAvalieElseComando(tavalieNode2, tabreparentesesNode3, pexpNode4, tfechaparentesesNode5, pcasesequenceNode6, pcaseelseNode7, tfimavalieNode8, tpontovirgulaNode9);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TEnquanto tenquantoNode2;
        TAbreParenteses tabreparentesesNode3;
        PExpLogica pexplogicaNode4;
        TFechaParenteses tfechaparentesesNode5;
        TFaca tfacaNode6;
        PCmdSequence pcmdsequenceNode7;
        TFimEnquanto tfimenquantoNode8;
        TPontoVirgula tpontovirgulaNode9;
        tenquantoNode2 = (TEnquanto)nodeArrayList1.get(0);
        tabreparentesesNode3 = (TAbreParenteses)nodeArrayList2.get(0);
        pexplogicaNode4 = (PExpLogica)nodeArrayList3.get(0);
        tfechaparentesesNode5 = (TFechaParenteses)nodeArrayList4.get(0);
        tfacaNode6 = (TFaca)nodeArrayList5.get(0);
        pcmdsequenceNode7 = (PCmdSequence)nodeArrayList6.get(0);
        tfimenquantoNode8 = (TFimEnquanto)nodeArrayList7.get(0);
        tpontovirgulaNode9 = (TPontoVirgula)nodeArrayList8.get(0);

        pcomandoNode1 = new AEnquantoComando(tenquantoNode2, tabreparentesesNode3, pexplogicaNode4, tfechaparentesesNode5, tfacaNode6, pcmdsequenceNode7, tfimenquantoNode8, tpontovirgulaNode9);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ARepitaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TRepita trepitaNode2;
        PCmdSequence pcmdsequenceNode3;
        TAte tateNode4;
        TAbreParenteses tabreparentesesNode5;
        PExpLogica pexplogicaNode6;
        TFechaParenteses tfechaparentesesNode7;
        TPontoVirgula tpontovirgulaNode8;
        trepitaNode2 = (TRepita)nodeArrayList1.get(0);
        pcmdsequenceNode3 = (PCmdSequence)nodeArrayList2.get(0);
        tateNode4 = (TAte)nodeArrayList3.get(0);
        tabreparentesesNode5 = (TAbreParenteses)nodeArrayList4.get(0);
        pexplogicaNode6 = (PExpLogica)nodeArrayList5.get(0);
        tfechaparentesesNode7 = (TFechaParenteses)nodeArrayList6.get(0);
        tpontovirgulaNode8 = (TPontoVirgula)nodeArrayList7.get(0);

        pcomandoNode1 = new ARepitaComando(trepitaNode2, pcmdsequenceNode3, tateNode4, tabreparentesesNode5, pexplogicaNode6, tfechaparentesesNode7, tpontovirgulaNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AParaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TPara tparaNode2;
        PVar pvarNode3;
        TDe tdeNode4;
        TInt tintNode5;
        TAte tateNode6;
        PNInt pnintNode7;
        TFaca tfacaNode8;
        PCmdSequence pcmdsequenceNode9;
        TFimPara tfimparaNode10;
        TPontoVirgula tpontovirgulaNode11;
        tparaNode2 = (TPara)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tdeNode4 = (TDe)nodeArrayList3.get(0);
        tintNode5 = (TInt)nodeArrayList4.get(0);
        tateNode6 = (TAte)nodeArrayList5.get(0);
        pnintNode7 = (PNInt)nodeArrayList6.get(0);
        tfacaNode8 = (TFaca)nodeArrayList7.get(0);
        pcmdsequenceNode9 = (PCmdSequence)nodeArrayList8.get(0);
        tfimparaNode10 = (TFimPara)nodeArrayList9.get(0);
        tpontovirgulaNode11 = (TPontoVirgula)nodeArrayList10.get(0);

        pcomandoNode1 = new AParaComando(tparaNode2, pvarNode3, tdeNode4, tintNode5, tateNode6, pnintNode7, tfacaNode8, pcmdsequenceNode9, tfimparaNode10, tpontovirgulaNode11);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AParaPassoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TPara tparaNode2;
        PVar pvarNode3;
        TDe tdeNode4;
        TInt tintNode5;
        TPasso tpassoNode6;
        PNInt pnintNode7;
        TAte tateNode8;
        PNInt1 pnint1Node9;
        TFaca tfacaNode10;
        PCmdSequence pcmdsequenceNode11;
        TFimPara tfimparaNode12;
        TPontoVirgula tpontovirgulaNode13;
        tparaNode2 = (TPara)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tdeNode4 = (TDe)nodeArrayList3.get(0);
        tintNode5 = (TInt)nodeArrayList4.get(0);
        tpassoNode6 = (TPasso)nodeArrayList5.get(0);
        pnintNode7 = (PNInt)nodeArrayList6.get(0);
        tateNode8 = (TAte)nodeArrayList7.get(0);
        pnint1Node9 = (PNInt1)nodeArrayList8.get(0);
        tfacaNode10 = (TFaca)nodeArrayList9.get(0);
        pcmdsequenceNode11 = (PCmdSequence)nodeArrayList10.get(0);
        tfimparaNode12 = (TFimPara)nodeArrayList11.get(0);
        tpontovirgulaNode13 = (TPontoVirgula)nodeArrayList12.get(0);

        pcomandoNode1 = new AParaPassoComando(tparaNode2, pvarNode3, tdeNode4, tintNode5, tpassoNode6, pnintNode7, tateNode8, pnint1Node9, tfacaNode10, pcmdsequenceNode11, tfimparaNode12, tpontovirgulaNode13);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AOpSumExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POpSum popsumNode3;
        PTermo ptermoNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        popsumNode3 = (POpSum)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pexpNode1 = new AOpSumExp(pexpNode2, popsumNode3, ptermoNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ATermoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        pexpNode1 = new ATermoExp(ptermoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AOpMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PTermo ptermoNode2;
        POpMult popmultNode3;
        PFator pfatorNode4;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        popmultNode3 = (POpMult)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        ptermoNode1 = new AOpMultTermo(ptermoNode2, popmultNode3, pfatorNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        ptermoNode1 = new AFatorTermo(pfatorNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AParentesesFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TAbreParenteses tabreparentesesNode2;
        PExp pexpNode3;
        TFechaParenteses tfechaparentesesNode4;
        tabreparentesesNode2 = (TAbreParenteses)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tfechaparentesesNode4 = (TFechaParenteses)nodeArrayList3.get(0);

        pfatorNode1 = new AParentesesFator(tabreparentesesNode2, pexpNode3, tfechaparentesesNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AValorFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pfatorNode1 = new AValorFator(pvalorNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AVarFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pfatorNode1 = new AVarFator(pvarNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AMenosFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TMenos tmenosNode2;
        PFator pfatorNode3;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList2.get(0);

        pfatorNode1 = new AMenosFator(tmenosNode2, pfatorNode3);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AOuExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        TOu touNode3;
        PTermo1 ptermo1Node4;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        ptermo1Node4 = (PTermo1)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOuExpLogica(pexplogicaNode2, touNode3, ptermo1Node4);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ATermo1ExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PTermo1 ptermo1Node2;
        ptermo1Node2 = (PTermo1)nodeArrayList1.get(0);

        pexplogicaNode1 = new ATermo1ExpLogica(ptermo1Node2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AXorTermo1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo1 ptermo1Node1;
        {
            // Block
        PTermo1 ptermo1Node2;
        TXor txorNode3;
        PTermo2 ptermo2Node4;
        ptermo1Node2 = (PTermo1)nodeArrayList1.get(0);
        txorNode3 = (TXor)nodeArrayList2.get(0);
        ptermo2Node4 = (PTermo2)nodeArrayList3.get(0);

        ptermo1Node1 = new AXorTermo1(ptermo1Node2, txorNode3, ptermo2Node4);
        }
	nodeList.add(ptermo1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ATermo2Termo1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo1 ptermo1Node1;
        {
            // Block
        PTermo2 ptermo2Node2;
        ptermo2Node2 = (PTermo2)nodeArrayList1.get(0);

        ptermo1Node1 = new ATermo2Termo1(ptermo2Node2);
        }
	nodeList.add(ptermo1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AETermo2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo2 ptermo2Node1;
        {
            // Block
        PTermo2 ptermo2Node2;
        TE teNode3;
        PElemento1 pelemento1Node4;
        ptermo2Node2 = (PTermo2)nodeArrayList1.get(0);
        teNode3 = (TE)nodeArrayList2.get(0);
        pelemento1Node4 = (PElemento1)nodeArrayList3.get(0);

        ptermo2Node1 = new AETermo2(ptermo2Node2, teNode3, pelemento1Node4);
        }
	nodeList.add(ptermo2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ATermo3Termo2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo2 ptermo2Node1;
        {
            // Block
        PElemento1 pelemento1Node2;
        pelemento1Node2 = (PElemento1)nodeArrayList1.get(0);

        ptermo2Node1 = new ATermo3Termo2(pelemento1Node2);
        }
	nodeList.add(ptermo2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AElem5Elemento1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElemento1 pelemento1Node1;
        {
            // Block
        PTermo5 ptermo5Node2;
        ptermo5Node2 = (PTermo5)nodeArrayList1.get(0);

        pelemento1Node1 = new AElem5Elemento1(ptermo5Node2);
        }
	nodeList.add(pelemento1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ATermo3Elemento1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElemento1 pelemento1Node1;
        {
            // Block
        PTermo3 ptermo3Node2;
        ptermo3Node2 = (PTermo3)nodeArrayList1.get(0);

        pelemento1Node1 = new ATermo3Elemento1(ptermo3Node2);
        }
	nodeList.add(pelemento1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AOpIgualTermo3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo3 ptermo3Node1;
        {
            // Block
        PTermo7 ptermo7Node2;
        POpIgualdade popigualdadeNode3;
        PTermo7Aux ptermo7auxNode4;
        ptermo7Node2 = (PTermo7)nodeArrayList1.get(0);
        popigualdadeNode3 = (POpIgualdade)nodeArrayList2.get(0);
        ptermo7auxNode4 = (PTermo7Aux)nodeArrayList3.get(0);

        ptermo3Node1 = new AOpIgualTermo3(ptermo7Node2, popigualdadeNode3, ptermo7auxNode4);
        }
	nodeList.add(ptermo3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ATermo4Termo3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo3 ptermo3Node1;
        {
            // Block
        PTermo4 ptermo4Node2;
        ptermo4Node2 = (PTermo4)nodeArrayList1.get(0);

        ptermo3Node1 = new ATermo4Termo3(ptermo4Node2);
        }
	nodeList.add(ptermo3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AOpCompTermo4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo4 ptermo4Node1;
        {
            // Block
        PTermo7 ptermo7Node2;
        POpComp popcompNode3;
        PTermo7Aux ptermo7auxNode4;
        ptermo7Node2 = (PTermo7)nodeArrayList1.get(0);
        popcompNode3 = (POpComp)nodeArrayList2.get(0);
        ptermo7auxNode4 = (PTermo7Aux)nodeArrayList3.get(0);

        ptermo4Node1 = new AOpCompTermo4(ptermo7Node2, popcompNode3, ptermo7auxNode4);
        }
	nodeList.add(ptermo4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExpAuxTermo7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo7 ptermo7Node1;
        {
            // Block
        PExpAux pexpauxNode2;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);

        ptermo7Node1 = new AExpAuxTermo7(pexpauxNode2);
        }
	nodeList.add(ptermo7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ANaoTermo5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo5 ptermo5Node1;
        {
            // Block
        TNao tnaoNode2;
        PTermo5 ptermo5Node3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        ptermo5Node3 = (PTermo5)nodeArrayList2.get(0);

        ptermo5Node1 = new ANaoTermo5(tnaoNode2, ptermo5Node3);
        }
	nodeList.add(ptermo5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ATermo6Termo5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo5 ptermo5Node1;
        {
            // Block
        PTermo6 ptermo6Node2;
        ptermo6Node2 = (PTermo6)nodeArrayList1.get(0);

        ptermo5Node1 = new ATermo6Termo5(ptermo6Node2);
        }
	nodeList.add(ptermo5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AParentesesTermo6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo6 ptermo6Node1;
        {
            // Block
        TAbreParenteses tabreparentesesNode2;
        PExpLogica pexplogicaNode3;
        TFechaParenteses tfechaparentesesNode4;
        tabreparentesesNode2 = (TAbreParenteses)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList2.get(0);
        tfechaparentesesNode4 = (TFechaParenteses)nodeArrayList3.get(0);

        ptermo6Node1 = new AParentesesTermo6(tabreparentesesNode2, pexplogicaNode3, tfechaparentesesNode4);
        }
	nodeList.add(ptermo6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AOpSumExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PExpAux pexpauxNode2;
        POpSum popsumNode3;
        PTermoAux ptermoauxNode4;
        pexpauxNode2 = (PExpAux)nodeArrayList1.get(0);
        popsumNode3 = (POpSum)nodeArrayList2.get(0);
        ptermoauxNode4 = (PTermoAux)nodeArrayList3.get(0);

        pexpauxNode1 = new AOpSumExpAux(pexpauxNode2, popsumNode3, ptermoauxNode4);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ATermoExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAux pexpauxNode1;
        {
            // Block
        PTermoAux ptermoauxNode2;
        ptermoauxNode2 = (PTermoAux)nodeArrayList1.get(0);

        pexpauxNode1 = new ATermoExpAux(ptermoauxNode2);
        }
	nodeList.add(pexpauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AOpMultTermoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermoAux ptermoauxNode1;
        {
            // Block
        PTermoAux ptermoauxNode2;
        POpMult popmultNode3;
        PFatorAux pfatorauxNode4;
        ptermoauxNode2 = (PTermoAux)nodeArrayList1.get(0);
        popmultNode3 = (POpMult)nodeArrayList2.get(0);
        pfatorauxNode4 = (PFatorAux)nodeArrayList3.get(0);

        ptermoauxNode1 = new AOpMultTermoAux(ptermoauxNode2, popmultNode3, pfatorauxNode4);
        }
	nodeList.add(ptermoauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AFatorTermoAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermoAux ptermoauxNode1;
        {
            // Block
        PFatorAux pfatorauxNode2;
        pfatorauxNode2 = (PFatorAux)nodeArrayList1.get(0);

        ptermoauxNode1 = new AFatorTermoAux(pfatorauxNode2);
        }
	nodeList.add(ptermoauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AValorFatorAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorAux pfatorauxNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pfatorauxNode1 = new AValorFatorAux(pvalorNode2);
        }
	nodeList.add(pfatorauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AVarFatorAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorAux pfatorauxNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pfatorauxNode1 = new AVarFatorAux(pvarNode2);
        }
	nodeList.add(pfatorauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AMenosFatorAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorAux pfatorauxNode1;
        {
            // Block
        TMenos tmenosNode2;
        PFatorAux pfatorauxNode3;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);
        pfatorauxNode3 = (PFatorAux)nodeArrayList2.get(0);

        pfatorauxNode1 = new AMenosFatorAux(tmenosNode2, pfatorauxNode3);
        }
	nodeList.add(pfatorauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AParentesesFatorAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorAux pfatorauxNode1;
        {
            // Block
        TAbreParenteses tabreparentesesNode2;
        PExpAux pexpauxNode3;
        TFechaParenteses tfechaparentesesNode4;
        tabreparentesesNode2 = (TAbreParenteses)nodeArrayList1.get(0);
        pexpauxNode3 = (PExpAux)nodeArrayList2.get(0);
        tfechaparentesesNode4 = (TFechaParenteses)nodeArrayList3.get(0);

        pfatorauxNode1 = new AParentesesFatorAux(tabreparentesesNode2, pexpauxNode3, tfechaparentesesNode4);
        }
	nodeList.add(pfatorauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AMaisOpSum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpSum popsumNode1;
        {
            // Block
        TMais tmaisNode2;
        tmaisNode2 = (TMais)nodeArrayList1.get(0);

        popsumNode1 = new AMaisOpSum(tmaisNode2);
        }
	nodeList.add(popsumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AMenosOpSum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpSum popsumNode1;
        {
            // Block
        TMenos tmenosNode2;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);

        popsumNode1 = new AMenosOpSum(tmenosNode2);
        }
	nodeList.add(popsumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AVezesOpMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpMult popmultNode1;
        {
            // Block
        TVezes tvezesNode2;
        tvezesNode2 = (TVezes)nodeArrayList1.get(0);

        popmultNode1 = new AVezesOpMult(tvezesNode2);
        }
	nodeList.add(popmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ADivididoOpMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpMult popmultNode1;
        {
            // Block
        TDividido tdivididoNode2;
        tdivididoNode2 = (TDividido)nodeArrayList1.get(0);

        popmultNode1 = new ADivididoOpMult(tdivididoNode2);
        }
	nodeList.add(popmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AIgualdadeOpIgualdade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpIgualdade popigualdadeNode1;
        {
            // Block
        TIgualdade tigualdadeNode2;
        tigualdadeNode2 = (TIgualdade)nodeArrayList1.get(0);

        popigualdadeNode1 = new AIgualdadeOpIgualdade(tigualdadeNode2);
        }
	nodeList.add(popigualdadeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ADiferencaOpIgualdade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpIgualdade popigualdadeNode1;
        {
            // Block
        TDiferenca tdiferencaNode2;
        tdiferencaNode2 = (TDiferenca)nodeArrayList1.get(0);

        popigualdadeNode1 = new ADiferencaOpIgualdade(tdiferencaNode2);
        }
	nodeList.add(popigualdadeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMaiorOpComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpComp popcompNode1;
        {
            // Block
        TMaiorQue tmaiorqueNode2;
        tmaiorqueNode2 = (TMaiorQue)nodeArrayList1.get(0);

        popcompNode1 = new AMaiorOpComp(tmaiorqueNode2);
        }
	nodeList.add(popcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AMenorOpComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpComp popcompNode1;
        {
            // Block
        TMenorQue tmenorqueNode2;
        tmenorqueNode2 = (TMenorQue)nodeArrayList1.get(0);

        popcompNode1 = new AMenorOpComp(tmenorqueNode2);
        }
	nodeList.add(popcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AMaiorIgualOpComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpComp popcompNode1;
        {
            // Block
        TMaiorIgual tmaiorigualNode2;
        tmaiorigualNode2 = (TMaiorIgual)nodeArrayList1.get(0);

        popcompNode1 = new AMaiorIgualOpComp(tmaiorigualNode2);
        }
	nodeList.add(popcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AMenorIgualOpComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpComp popcompNode1;
        {
            // Block
        TMenorIgual tmenorigualNode2;
        tmenorigualNode2 = (TMenorIgual)nodeArrayList1.get(0);

        popcompNode1 = new AMenorIgualOpComp(tmenorigualNode2);
        }
	nodeList.add(popcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AXorOpRel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpRel poprelNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        poprelNode1 = new AXorOpRel(txorNode2);
        }
	nodeList.add(poprelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AEOpRel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpRel poprelNode1;
        {
            // Block
        TE teNode2;
        teNode2 = (TE)nodeArrayList1.get(0);

        poprelNode1 = new AEOpRel(teNode2);
        }
	nodeList.add(poprelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AOuOpRel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpRel poprelNode1;
        {
            // Block
        TOu touNode2;
        touNode2 = (TOu)nodeArrayList1.get(0);

        poprelNode1 = new AOuOpRel(touNode2);
        }
	nodeList.add(poprelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AIfElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfElse pifelseNode1;
        {
            // Block
        TSenao tsenaoNode2;
        PCmdSequence pcmdsequenceNode3;
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        pcmdsequenceNode3 = (PCmdSequence)nodeArrayList2.get(0);

        pifelseNode1 = new AIfElse(tsenaoNode2, pcmdsequenceNode3);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ACase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCase pcaseNode1;
        {
            // Block
        TCaso tcasoNode2;
        PValor pvalorNode3;
        TDoisPontos tdoispontosNode4;
        PCmdSequence pcmdsequenceNode5;
        tcasoNode2 = (TCaso)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);
        tdoispontosNode4 = (TDoisPontos)nodeArrayList3.get(0);
        pcmdsequenceNode5 = (PCmdSequence)nodeArrayList4.get(0);

        pcaseNode1 = new ACase(tcasoNode2, pvalorNode3, tdoispontosNode4, pcmdsequenceNode5);
        }
	nodeList.add(pcaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ACaseElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCaseElse pcaseelseNode1;
        {
            // Block
        TSenao tsenaoNode2;
        TDoisPontos tdoispontosNode3;
        PCmdSequence pcmdsequenceNode4;
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        pcmdsequenceNode4 = (PCmdSequence)nodeArrayList3.get(0);

        pcaseelseNode1 = new ACaseElse(tsenaoNode2, tdoispontosNode3, pcmdsequenceNode4);
        }
	nodeList.add(pcaseelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANInt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNInt pnintNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pnintNode1 = new ANInt(tintNode2);
        }
	nodeList.add(pnintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANInt1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNInt1 pnint1Node1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pnint1Node1 = new ANInt1(tintNode2);
        }
	nodeList.add(pnint1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATermo7Aux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo7Aux ptermo7auxNode1;
        {
            // Block
        PTermo7 ptermo7Node2;
        ptermo7Node2 = (PTermo7)nodeArrayList1.get(0);

        ptermo7auxNode1 = new ATermo7Aux(ptermo7Node2);
        }
	nodeList.add(ptermo7auxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ADclSequenceDeclSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclSequence pdeclsequenceNode1;
        {
            // Block
        PDeclSequence pdeclsequenceNode2;
        PDeclaracao pdeclaracaoNode3;
        pdeclsequenceNode2 = (PDeclSequence)nodeArrayList1.get(0);
        pdeclaracaoNode3 = (PDeclaracao)nodeArrayList2.get(0);

        pdeclsequenceNode1 = new ADclSequenceDeclSequence(pdeclsequenceNode2, pdeclaracaoNode3);
        }
	nodeList.add(pdeclsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ADeclDeclSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclSequence pdeclsequenceNode1;
        {
            // Block
        PDeclaracao pdeclaracaoNode2;
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList1.get(0);

        pdeclsequenceNode1 = new ADeclDeclSequence(pdeclaracaoNode2);
        }
	nodeList.add(pdeclsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ACmdSequenceCmdSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdSequence pcmdsequenceNode1;
        {
            // Block
        PCmdSequence pcmdsequenceNode2;
        PComando pcomandoNode3;
        pcmdsequenceNode2 = (PCmdSequence)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcmdsequenceNode1 = new ACmdSequenceCmdSequence(pcmdsequenceNode2, pcomandoNode3);
        }
	nodeList.add(pcmdsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ACmdCmdSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmdSequence pcmdsequenceNode1;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);

        pcmdsequenceNode1 = new ACmdCmdSequence(pcomandoNode2);
        }
	nodeList.add(pcmdsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AVarSequenceVarSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarSequence pvarsequenceNode1;
        {
            // Block
        PVarSequence pvarsequenceNode2;
        TVirgula tvirgulaNode3;
        PVar pvarNode4;
        pvarsequenceNode2 = (PVarSequence)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);

        pvarsequenceNode1 = new AVarSequenceVarSequence(pvarsequenceNode2, tvirgulaNode3, pvarNode4);
        }
	nodeList.add(pvarsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AVarVarSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarSequence pvarsequenceNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pvarsequenceNode1 = new AVarVarSequence(pvarNode2);
        }
	nodeList.add(pvarsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ASequenceExpSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpSequence pexpsequenceNode1;
        {
            // Block
        PExpSequence pexpsequenceNode2;
        TVirgula tvirgulaNode3;
        PExp pexpNode4;
        pexpsequenceNode2 = (PExpSequence)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpsequenceNode1 = new ASequenceExpSequence(pexpsequenceNode2, tvirgulaNode3, pexpNode4);
        }
	nodeList.add(pexpsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AExpExpSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpSequence pexpsequenceNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpsequenceNode1 = new AExpExpSequence(pexpNode2);
        }
	nodeList.add(pexpsequenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AOptionsCaseSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCaseSequence pcasesequenceNode1;
        {
            // Block
        PCaseSequence pcasesequenceNode2;
        PCase pcaseNode3;
        pcasesequenceNode2 = (PCaseSequence)nodeArrayList1.get(0);
        pcaseNode3 = (PCase)nodeArrayList2.get(0);

        pcasesequenceNode1 = new AOptionsCaseSequence(pcasesequenceNode2, pcaseNode3);
        }
	nodeList.add(pcasesequenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ACaseCaseSequence */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCaseSequence pcasesequenceNode1;
        {
            // Block
        PCase pcaseNode2;
        pcaseNode2 = (PCase)nodeArrayList1.get(0);

        pcasesequenceNode1 = new ACaseCaseSequence(pcaseNode2);
        }
	nodeList.add(pcasesequenceNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {22, SHIFT, 1}, },
			{{-1, ERROR, 1}, {51, SHIFT, 3}, },
			{{-1, ERROR, 2}, {58, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {17, SHIFT, 4}, },
			{{-1, ERROR, 4}, {3, SHIFT, 5}, {5, SHIFT, 6}, {18, SHIFT, 7}, {23, SHIFT, 8}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 6}, {51, SHIFT, 12}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 10}, {30, SHIFT, 13}, },
			{{-1, ERROR, 11}, {0, SHIFT, 14}, {3, SHIFT, 5}, {5, SHIFT, 6}, {8, SHIFT, 15}, {9, SHIFT, 16}, {18, SHIFT, 7}, {19, SHIFT, 17}, {20, SHIFT, 18}, {23, SHIFT, 8}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, ERROR, 12}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 13}, {51, SHIFT, 21}, },
			{{-1, ERROR, 14}, {29, SHIFT, 32}, },
			{{-1, ERROR, 15}, {29, SHIFT, 33}, },
			{{-1, ERROR, 16}, {29, SHIFT, 34}, },
			{{-1, ERROR, 17}, {29, SHIFT, 35}, },
			{{-1, ERROR, 18}, {51, SHIFT, 21}, },
			{{-1, ERROR, 19}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, ERROR, 20}, {29, SHIFT, 38}, },
			{{-1, REDUCE, 6}, {28, SHIFT, 39}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 23}, {31, SHIFT, 40}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 25}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {12, SHIFT, 41}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 29}, {34, SHIFT, 43}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 31}, {34, SHIFT, 44}, {35, SHIFT, 45}, },
			{{-1, ERROR, 32}, {29, SHIFT, 46}, {37, SHIFT, 47}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 33}, {29, SHIFT, 53}, {37, SHIFT, 54}, {47, SHIFT, 55}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 34}, {29, SHIFT, 46}, {37, SHIFT, 47}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 35}, {51, SHIFT, 21}, },
			{{-1, ERROR, 36}, {6, SHIFT, 73}, },
			{{-1, ERROR, 37}, {0, SHIFT, 14}, {1, SHIFT, 74}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, ERROR, 38}, {29, SHIFT, 53}, {37, SHIFT, 54}, {47, SHIFT, 55}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 39}, {52, SHIFT, 76}, },
			{{-1, ERROR, 40}, {29, SHIFT, 46}, {37, SHIFT, 47}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 45}, {51, SHIFT, 21}, },
			{{-1, ERROR, 46}, {29, SHIFT, 46}, {37, SHIFT, 47}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 47}, {29, SHIFT, 46}, {37, SHIFT, 47}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 50}, {33, SHIFT, 81}, {36, SHIFT, 82}, {37, SHIFT, 83}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 85}, {39, SHIFT, 86}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 53}, {29, SHIFT, 53}, {37, SHIFT, 54}, {47, SHIFT, 55}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 54}, {29, SHIFT, 90}, {37, SHIFT, 54}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 55}, {29, SHIFT, 92}, {47, SHIFT, 55}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 58}, {33, SHIFT, 94}, {49, SHIFT, 95}, },
			{{-1, REDUCE, 31}, {50, SHIFT, 96}, },
			{{-1, REDUCE, 33}, {48, SHIFT, 97}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 64}, {41, SHIFT, 98}, {42, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {46, SHIFT, 103}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 41}, {36, SHIFT, 82}, {37, SHIFT, 83}, },
			{{-1, REDUCE, 46}, {38, SHIFT, 85}, {39, SHIFT, 86}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 79}, {36, SHIFT, 82}, {37, SHIFT, 83}, },
			{{-1, ERROR, 71}, {33, SHIFT, 108}, {35, SHIFT, 109}, },
			{{-1, ERROR, 72}, {33, SHIFT, 110}, {35, SHIFT, 45}, },
			{{-1, ERROR, 73}, {52, SHIFT, 111}, },
			{{-1, ERROR, 74}, {29, SHIFT, 112}, },
			{{-1, ERROR, 75}, {33, SHIFT, 113}, {49, SHIFT, 95}, },
			{{-1, ERROR, 76}, {32, SHIFT, 114}, },
			{{-1, ERROR, 77}, {34, SHIFT, 115}, {36, SHIFT, 82}, {37, SHIFT, 83}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 79}, {33, SHIFT, 116}, {36, SHIFT, 82}, {37, SHIFT, 83}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 81}, {4, SHIFT, 117}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 84}, {29, SHIFT, 46}, {37, SHIFT, 47}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 87}, {29, SHIFT, 46}, {37, SHIFT, 47}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 88}, {33, SHIFT, 122}, {49, SHIFT, 95}, },
			{{-1, REDUCE, 41}, {33, SHIFT, 123}, {36, SHIFT, 82}, {37, SHIFT, 83}, },
			{{-1, ERROR, 90}, {29, SHIFT, 90}, {37, SHIFT, 54}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 92}, {29, SHIFT, 53}, {37, SHIFT, 54}, {47, SHIFT, 55}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 94}, {10, SHIFT, 125}, },
			{{-1, ERROR, 95}, {29, SHIFT, 53}, {37, SHIFT, 54}, {47, SHIFT, 55}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 96}, {29, SHIFT, 53}, {37, SHIFT, 54}, {47, SHIFT, 55}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 97}, {29, SHIFT, 53}, {37, SHIFT, 54}, {47, SHIFT, 55}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 104}, {29, SHIFT, 90}, {37, SHIFT, 54}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 105}, {29, SHIFT, 90}, {37, SHIFT, 54}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 106}, {29, SHIFT, 90}, {37, SHIFT, 54}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 107}, {29, SHIFT, 90}, {37, SHIFT, 54}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 108}, {34, SHIFT, 134}, },
			{{-1, ERROR, 109}, {29, SHIFT, 46}, {37, SHIFT, 47}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 110}, {34, SHIFT, 136}, },
			{{-1, ERROR, 111}, {1, SHIFT, 137}, {21, SHIFT, 138}, },
			{{-1, ERROR, 112}, {29, SHIFT, 53}, {37, SHIFT, 54}, {47, SHIFT, 55}, {51, SHIFT, 21}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, ERROR, 113}, {7, SHIFT, 140}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 117}, {52, SHIFT, 26}, {53, SHIFT, 27}, {55, SHIFT, 28}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 119}, {4, SHIFT, 117}, {13, SHIFT, 142}, {26, SHIFT, 143}, },
			{{-1, REDUCE, 22}, {38, SHIFT, 85}, {39, SHIFT, 86}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 124}, {33, SHIFT, 123}, {36, SHIFT, 82}, {37, SHIFT, 83}, },
			{{-1, ERROR, 125}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, REDUCE, 30}, {50, SHIFT, 96}, },
			{{-1, REDUCE, 32}, {48, SHIFT, 97}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 45}, {38, SHIFT, 85}, {39, SHIFT, 86}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 78}, {36, SHIFT, 82}, {37, SHIFT, 83}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 137}, {52, SHIFT, 147}, },
			{{-1, ERROR, 138}, {52, SHIFT, 147}, },
			{{-1, ERROR, 139}, {33, SHIFT, 150}, {49, SHIFT, 95}, },
			{{-1, ERROR, 140}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, ERROR, 141}, {30, SHIFT, 152}, },
			{{-1, ERROR, 142}, {34, SHIFT, 153}, },
			{{-1, ERROR, 143}, {30, SHIFT, 154}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 145}, {13, SHIFT, 155}, },
			{{-1, ERROR, 146}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {14, SHIFT, 156}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 148}, {10, SHIFT, 157}, },
			{{-1, ERROR, 149}, {1, SHIFT, 158}, },
			{{-1, ERROR, 150}, {34, SHIFT, 159}, },
			{{-1, ERROR, 151}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {16, SHIFT, 160}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {26, SHIFT, 161}, {51, SHIFT, 21}, },
			{{-1, ERROR, 152}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 154}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, ERROR, 155}, {34, SHIFT, 165}, },
			{{-1, ERROR, 156}, {34, SHIFT, 166}, },
			{{-1, ERROR, 157}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, ERROR, 158}, {52, SHIFT, 168}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 160}, {34, SHIFT, 170}, },
			{{-1, ERROR, 161}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, ERROR, 162}, {16, SHIFT, 172}, },
			{{-1, REDUCE, 67}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 167}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {15, SHIFT, 173}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 169}, {10, SHIFT, 174}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 66}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, ERROR, 172}, {34, SHIFT, 175}, },
			{{-1, ERROR, 173}, {34, SHIFT, 176}, },
			{{-1, ERROR, 174}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 177}, {0, SHIFT, 14}, {8, SHIFT, 15}, {9, SHIFT, 16}, {15, SHIFT, 178}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {51, SHIFT, 21}, },
			{{-1, ERROR, 178}, {34, SHIFT, 179}, },
			{{-1, REDUCE, 21}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 9}, {11, 22}, },
			{{-1, 10}, },
			{{-1, 23}, {13, 30}, {18, 36}, {32, 48}, {33, 56}, {34, 48}, {35, 30}, {38, 56}, {40, 48}, {45, 78}, {46, 48}, {47, 48}, {53, 56}, {54, 56}, {84, 48}, {87, 48}, {90, 56}, {92, 56}, {95, 56}, {96, 56}, {97, 56}, {104, 56}, {105, 56}, {106, 56}, {107, 56}, {109, 48}, {112, 56}, },
			{{-1, 57}, {12, 29}, {32, 49}, {34, 49}, {40, 49}, {46, 49}, {47, 49}, {84, 49}, {87, 49}, {109, 49}, {117, 141}, },
			{{-1, 24}, {25, 42}, {37, 42}, {146, 42}, {151, 42}, {163, 42}, {164, 42}, {167, 42}, {171, 42}, {177, 42}, },
			{{-1, 50}, {34, 70}, {40, 77}, {46, 79}, {109, 135}, },
			{{-1, 51}, {84, 120}, },
			{{-1, 52}, {47, 80}, {87, 121}, },
			{{-1, 88}, {33, 58}, {38, 75}, {112, 139}, },
			{{-1, 59}, {95, 126}, },
			{{-1, 60}, {96, 127}, },
			{{-1, 61}, {97, 128}, },
			{{-1, 62}, },
			{{-1, 63}, },
			{{-1, 64}, {104, 129}, {105, 129}, },
			{{-1, 65}, {55, 93}, },
			{{-1, 66}, },
			{{-1, 67}, {53, 89}, {90, 124}, },
			{{-1, 68}, {106, 132}, },
			{{-1, 69}, {54, 91}, {107, 133}, },
			{{-1, 84}, {67, 106}, {89, 106}, {124, 106}, },
			{{-1, 87}, {68, 107}, {132, 107}, },
			{{-1, 104}, },
			{{-1, 105}, },
			{{-1, -1}, },
			{{-1, 162}, },
			{{-1, 118}, {119, 144}, },
			{{-1, 145}, },
			{{-1, 148}, {138, 149}, },
			{{-1, 169}, },
			{{-1, 130}, {105, 131}, },
			{{-1, 11}, },
			{{-1, 25}, {19, 37}, {125, 146}, {140, 151}, {152, 163}, {154, 164}, {157, 167}, {161, 171}, {174, 177}, },
			{{-1, 31}, {35, 72}, },
			{{-1, 71}, },
			{{-1, 119}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'caractere', 'const', 'inteiro', 'real'",
			"expecting: ':'",
			"expecting: 'avalie', 'caractere', 'const', 'enquanto', 'escreva', 'inteiro', 'leia', 'para', 'real', 'repita', 'se', id",
			"expecting: int, float, string",
			"expecting: '('",
			"expecting: 'avalie', 'enquanto', 'escreva', 'leia', 'para', 'repita', 'se', id",
			"expecting: 'de', '[', ':=', ')', ';', ',', '+', '-', '*', '/', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'xor'",
			"expecting: ':='",
			"expecting: 'avalie', 'ate', 'caso', 'enquanto', 'escreva', 'fim.', 'fim avalie', 'fim enquanto', 'fim para', 'fim se', 'leia', 'para', 'repita', 'se', 'senao', id",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim.', 'leia', 'para', 'repita', 'se', id",
			"expecting: ':', ')', ';', ',', '+', '-', '*', '/', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'xor'",
			"expecting: ';'",
			"expecting: ')', ';', ','",
			"expecting: ';', ','",
			"expecting: '(', '-', id, int, float, string",
			"expecting: '(', '-', 'nao', id, int, float, string",
			"expecting: 'de'",
			"expecting: 'avalie', 'ate', 'enquanto', 'escreva', 'leia', 'para', 'repita', 'se', id",
			"expecting: int",
			"expecting: ')', ';', ',', '+', '-', '*', '/'",
			"expecting: ')', '+', '-'",
			"expecting: '(', 'nao'",
			"expecting: ')', '+', '-', '*', '/', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'xor'",
			"expecting: ')', 'ou'",
			"expecting: ')', 'ou', 'xor'",
			"expecting: ')', 'e', 'ou', 'xor'",
			"expecting: '=', '<>', '>', '<', '>=', '<='",
			"expecting: ')', '+', '-', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'xor'",
			"expecting: ')', ',', '+', '-'",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: ';', '+', '-'",
			"expecting: 'caso'",
			"expecting: ')', '+', '-', '=', '<>', '>', '<', '>=', '<='",
			"expecting: 'faca'",
			"expecting: 'ate', 'passo'",
			"expecting: 'entao'",
			"expecting: 'de', ':=', ')', ';', ',', '+', '-', '*', '/', '=', '<>', '>', '<', '>=', '<=', 'e', 'ou', 'xor'",
			"expecting: 'caso', 'fim avalie', 'senao'",
			"expecting: 'fim avalie'",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim enquanto', 'leia', 'para', 'repita', 'se', id",
			"expecting: 'ate', 'faca'",
			"expecting: 'ate'",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim se', 'leia', 'para', 'repita', 'se', 'senao', id",
			"expecting: 'fim se'",
			"expecting: 'avalie', 'caso', 'enquanto', 'escreva', 'fim avalie', 'leia', 'para', 'repita', 'se', 'senao', id",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim avalie', 'leia', 'para', 'repita', 'se', id",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim para', 'leia', 'para', 'repita', 'se', id",
			"expecting: 'avalie', 'enquanto', 'escreva', 'fim se', 'leia', 'para', 'repita', 'se', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 1, 5, 5, 6, 5, 6, 7, 1, 8, 8, 8, 8, 1, 9, 8, 10, 6, 11, 12, 13, 14, 14, 14, 15, 16, 17, 18, 19, 18, 1, 20, 21, 19, 22, 18, 2, 12, 6, 6, 1, 18, 18, 23, 23, 24, 23, 23, 19, 18, 25, 26, 26, 27, 28, 29, 29, 29, 29, 30, 29, 29, 31, 26, 26, 32, 33, 33, 22, 8, 27, 34, 35, 16, 24, 23, 36, 18, 18, 18, 18, 18, 18, 27, 37, 18, 26, 19, 29, 38, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 15, 39, 19, 40, 41, 12, 23, 7, 42, 42, 23, 23, 29, 26, 24, 9, 28, 29, 29, 29, 29, 29, 26, 26, 12, 32, 12, 22, 22, 27, 9, 5, 15, 5, 42, 43, 44, 45, 38, 46, 15, 47, 9, 12, 9, 15, 15, 9, 22, 12, 15, 9, 48, 49, 50, 12, 12, 51, 38, 38, 12, 52, 15, 15, 9, 12, 12, 51, 15, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
