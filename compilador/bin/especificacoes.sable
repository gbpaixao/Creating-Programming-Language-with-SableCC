/* Análise léxica */

Helpers
	tudo = [0 .. 127];
	all = [tudo - [10 + 13]];
	digito = ['0' .. '9'];
	letra_min = ['a' .. 'z'];
	letra_mai = ['A' .. 'Z'];
	underscore = '_';
	aspas_simples = ''';
	lr = 10;
	cr = 13;
	ht = 09; // tab
	allbutslash = [tudo-'/'];
	allbutstar = [tudo-'*'];
	allbutstarandslash = [tudo-['/'+'*']];
	
States
	normal, 
	comentario;

Tokens

	/* Palavras reservadas*/ 
	{normal} avalie = 'avalie';
	{normal} ate = 'ate';
	{normal} booleano = 'booleano';
	{normal} caractere = 'caractere';
	{normal} caso = 'caso';
	{normal} constante = 'const';
	{normal} de = 'de';
	{normal} entao = 'entao';
	{normal} enquanto = 'enquanto';
	{normal} escreva = 'escreva';
	{normal} faca = 'faca';
	{normal} falso = 'falso';
	{normal} fim = 'fim.';
	{normal} fim_avalie = 'fim avalie';
	{normal} fim_enquanto = 'fim enquanto';
	{normal} fim_para = 'fim para';
	{normal} fim_se = 'fim se';
	{normal} inicio = 'inicio';
	{normal} inteiro = 'inteiro';
	{normal} leia = 'leia';
	{normal} para = 'para';
	{normal} passo = 'passo';
	{normal} programa = 'programa';
	{normal} real = 'real';
	{normal} repita = 'repita';
	{normal} se = 'se';
	{normal} senao = 'senao';
	{normal} verdadeiro = 'verdadeiro';

	
	
	/* Firulas */
	{normal} abre_colchete = '[';
	{normal} abre_parenteses = '(';
	{normal} dois_pontos = ':';
	{normal} dois_pontos_igual = ':=';
	{normal, comentario} enter = lr | cr;
	{normal, comentario} espaco = ' ';
	{normal} fecha_colchete = ']';
	{normal} fecha_parenteses = ')';
	{normal} ponto_virgula = ';';
	{normal, comentario} tab = ht;
	{normal} virgula = ',';

	
	/* Operadores Aritméticos*/
	{normal} mais = '+';
	{normal} menos = '-';
	{normal} vezes = '*';
	{normal} dividido = '/';
	
	/* Operadores Relacionais*/
	{normal} atribuicao = ':=';
	{normal} igualdade = '=';
	{normal} diferenca = '<>';
	{normal} maior_que = '>';
	{normal} menor_que = '<';
	{normal} maior_igual = '>=';
	{normal} menor_igual = '<=';
	
	/* Operadores Booleanos */
	{normal} nao = 'nao';
	{normal} e = 'e';
	{normal} ou = 'ou';
	{normal} xor = 'xor';
	 
	/* Expressões regulares */
	{normal} id = (underscore | letra_mai | letra_min) (letra_mai | letra_min | digito | underscore)*;
	{normal} int = digito+;
	{normal} float = digito+ ',' digito+;
	{normal} char = aspas_simples [all-39] aspas_simples;
	{normal} string = aspas_simples [all-39]* aspas_simples;

	{normal} comentario_linha = '//' all*;
	{normal -> comentario, comentario} comentario_bloco_abre = '/*';
	{comentario} comentario_bloco_meio = allbutstarandslash*;
	{comentario} comentario_star = '*';
	{comentario} comentario_slash = '/';
	{comentario, normal} comentario_bloco_fecha = '*/';
	

Ignored Tokens
	espaco,
	enter,
	tab,
	comentario_linha,
	comentario_bloco_abre,
	comentario_bloco_fecha,
	comentario_bloco_meio;
		
Productions 
	
	// Produção inicial
	start {-> P.start} = {start} programa id inicio [decseq]:decl_sequence [cmdseq]:cmd_sequence fim {-> New start (id, [decseq.declaracao], [cmdseq.comando])};

	decl_sequence {-> P.declaracao*} = {dcl_sequence} decl_sequence declaracao {-> [decl_sequence.declaracao, declaracao]}
				  | {decl} declaracao {-> [declaracao]};
		
	declaracao {-> P.declaracao} = {var} tipo dois_pontos [varseq]:var_sequence ponto_virgula {-> New declaracao.var (tipo, [varseq.var])}
		   	   | {const} constante id valor ponto_virgula {-> New declaracao.const (id, valor)};

	
	tipo {-> P.tipo} = {float} real {-> New tipo.float (real)}
		  |{int} inteiro {-> New tipo.int (inteiro)}
		  | {char} caractere {-> New tipo.char (caractere)}; 
	
	var {-> P.var} = {id} id {-> New var.id (id)} 
	    | {vetor} id abre_colchete int fecha_colchete {-> New var.vetor (id, int)};
	
	var_sequence {-> P.var*} = {var_sequence} var_sequence virgula var {-> [var_sequence.var, var]}
				 | {var} var {-> [var]};
	
	valor {-> P.valor} = {string} string {-> New valor.string (string)} 
		  | {int} int {-> New valor.int (int)}
		  | {float} float {-> New valor.float (float)};

	comando {-> P.comando} = {atribuicao} var dois_pontos_igual exp ponto_virgula {-> New comando.atribuicao (var, exp)}
			| {leia} leia abre_parenteses var_sequence fecha_parenteses ponto_virgula {-> New comando.leia ([var_sequence.var])}
			| {escreva} escreva abre_parenteses exp_sequence fecha_parenteses ponto_virgula {-> New comando.escreva ([exp_sequence.exp])}
			| {se} se abre_parenteses exp_logica fecha_parenteses entao cmd_sequence fim_se ponto_virgula {-> New comando.se (exp_logica, [cmd_sequence.comando])} 
			| {se_else} se abre_parenteses exp_logica fecha_parenteses entao cmd_sequence if_else fim_se ponto_virgula {-> New comando.se_else (exp_logica, [cmd_sequence.comando], if_else)} 
			| {avalie} avalie abre_parenteses exp fecha_parenteses case_sequence fim_avalie ponto_virgula  {-> New comando.avalie (exp, [case_sequence.case])} 
			| {avalie_else} avalie abre_parenteses exp fecha_parenteses case_sequence case_else fim_avalie ponto_virgula {-> New comando.avalie_else (exp, [case_sequence.case], case_else)} 
			| {enquanto} enquanto abre_parenteses exp_logica fecha_parenteses faca cmd_sequence fim_enquanto ponto_virgula {-> New comando.enquanto (exp_logica, [cmd_sequence.comando])} 
			| {repita} repita cmd_sequence ate abre_parenteses exp_logica fecha_parenteses ponto_virgula {-> New comando.repita ([cmd_sequence.comando], exp_logica)} 
			| {para} para var de [int1]:int ate [int2]:int faca cmd_sequence fim_para ponto_virgula {-> New comando.para (var, int1, int2, [cmd_sequence.comando])}
			| {para_passo} para var de [int1]:int passo [int2]:int ate [int3]:int faca cmd_sequence fim_para ponto_virgula {-> New comando.para_passo (var, int1, int2, int3, [cmd_sequence.comando])};
	
	cmd_sequence {-> P.comando*} = {cmd_sequence} cmd_sequence comando {-> [cmd_sequence.comando, comando]}
				 | {cmd} comando {-> [comando]};

	// If	 	 		  
	if_else {-> P.if_else} = senao cmd_sequence {-> New if_else ([cmd_sequence.comando])};
	
	// Case
	case {-> P.case} = caso valor dois_pontos cmd_sequence {-> New case (valor, [cmd_sequence.comando])};
	
	case_sequence {-> P.case*} = {options} case_sequence case {-> [case_sequence.case, case]}
	 	 		  | {case} case {-> [case]};  
	
	case_else {-> P.case_else} = senao dois_pontos cmd_sequence {-> New case_else ([cmd_sequence.comando])};
	
	/* EXP*/
	
	exp {-> P.exp} = {op_sum} exp mais termo {-> New exp.op_sum (exp, termo.exp)}
		| {op_sub} exp menos termo {-> New exp.op_sub (exp, termo.exp)}
		| {termo} termo {-> termo.exp};
	termo {-> P.exp} = {op_mult} [l]:termo vezes [r]:fator {-> New exp.op_mult (l.exp, r.exp)}
		  | {op_div} [l]:termo dividido [r]:fator {-> New exp.op_div (l.exp, r.exp)}
		  | {fator} fator {-> fator.exp};
	fator {-> P.exp} = {parenteses} abre_parenteses exp fecha_parenteses {-> New exp.parenteses (exp)}
		  | {valor} valor {-> New exp.valor (valor)}
		  | {var} var {-> New exp.var (var)}
		  | {menos} menos [l]:fator {-> New exp.menos (l.exp)};
	
	exp_sequence {-> P.exp*}= {sequence} exp_sequence virgula exp  {-> [exp_sequence.exp, exp]}
				 | {exp} exp {-> [exp]};
	
	/* EXP-LÓGICA */

	exp_logica {-> P.exp_logica} = {ou} exp_logica ou termo1 {-> New exp_logica.ou (exp_logica, termo1.exp_logica)}
			   | {termo1} termo1 {-> termo1.exp_logica};	  
	termo1 {-> P.exp_logica} = {xor} [l]:termo1 xor [r]:termo2 {-> New exp_logica.xor (l.exp_logica, r.exp_logica)}
		   | {termo2} termo2 {-> termo2.exp_logica};
	termo2 {-> P.exp_logica} = {e} [l]:termo2 e [r]:elemento1 {-> New exp_logica.e (l.exp_logica, r.exp_logica)}
		   | {termo3} elemento1 {-> elemento1.exp_logica};
		   
	// Chega nesse ponto ele tem que ir ou pro nao, ou pras exp_aux
	elemento1 {-> P.exp_logica} = {termo5} termo5 {-> termo5.exp_logica}
		   | {termo3} termo3 {-> termo3.exp_logica};
	
	termo5 {-> P.exp_logica} = {nao} nao [r]:termo5 {-> New exp_logica.nao (r.exp_logica)}
		   | {termo6} termo6 {-> termo6.exp_logica};
	termo6 {-> P.exp_logica} = {parenteses} abre_parenteses [r]:exp_logica fecha_parenteses {-> New exp_logica.parenteses (r.exp_logica)};	
	
	
	termo3 {-> P.exp_logica} = {op_igual} [l]:exp_aux igualdade [r]:exp_aux {-> New exp_logica.op_igual (l.exp_aux, r.exp_aux)}
		   | {op_dif} [l]:exp_aux diferenca [r]:exp_aux {-> New exp_logica.op_dif (l.exp_aux, r.exp_aux)}
		   | {termo4} termo4 {-> termo4.exp_logica};	
	termo4 {-> P.exp_logica} = {op_maior} [l]:exp_aux maior_que [r]:exp_aux {-> New exp_logica.op_maior (l.exp_aux, r.exp_aux)}
		   | {op_menor} [l]:exp_aux menor_que [r]:exp_aux {-> New exp_logica.op_menor (l.exp_aux, r.exp_aux)}
		   | {op_maior_igual} [l]:exp_aux maior_igual [r]:exp_aux {-> New exp_logica.op_maior_igual (l.exp_aux, r.exp_aux)}
		   | {op_menor_igual} [l]:exp_aux menor_igual [r]:exp_aux {-> New exp_logica.op_menor_igual (l.exp_aux, r.exp_aux)};
		   
		   	/* EXP-AUX */ 
		   	// É praticamente uma cópia de EXP, mas esse serve para o exp_logica poder pegar 
		   	// as operações de soma e multiplicação sem a ambiguidade do parenteses 
	
			exp_aux {-> P.exp_aux} = {op_sum} exp_aux mais termo_aux {-> New exp_aux.op_sum (exp_aux, termo_aux.exp_aux)}
					| {op_sub} exp_aux menos termo_aux {-> New exp_aux.op_sub (exp_aux, termo_aux.exp_aux)}
					| {termo} termo_aux {-> termo_aux.exp_aux};
			termo_aux {-> P.exp_aux} = {op_mult} [l]:termo_aux vezes [r]:fator_aux {-> New exp_aux.op_mult (l.exp_aux, r.exp_aux)}
				  | {op_div} [l]:termo_aux dividido [r]:fator_aux {-> New exp_aux.op_div (l.exp_aux, r.exp_aux)}
				  | {fator} fator_aux {-> fator_aux.exp_aux};
			fator_aux {-> P.exp_aux} = {valor} valor {-> New exp_aux.valor (valor)}
				  | {var} var {-> New exp_aux.var (var)}
				  | {menos} menos fator_aux {-> New exp_aux.menos (fator_aux.exp_aux)}
				  | {parenteses} abre_parenteses exp_aux fecha_parenteses {-> New exp_aux.parenteses (exp_aux.exp_aux)};

	 	 		  
Abstract Syntax Tree
    start = id declaracao* comando*;
 	
 	declaracao = {var} tipo var* |
				 {const} id valor;
	
	tipo = {float} real | 
	       {int} inteiro | 
	       {char} caractere;
	       
	var = {id} id | 
      	  {vetor} id int;

    valor = {string} string | 
     		{int} int | 
     		{float} float;       
 	
    comando = {atribuicao} var exp |
    		  {leia} var* |
    		  {escreva} exp* |
    		  {se} exp_logica comando* |
    		  {se_else} exp_logica comando* if_else | 
    		  {avalie} exp case* |
    		  {avalie_else} exp case* case_else |
    		  {enquanto} exp_logica comando* | 
    		  {repita} comando* exp_logica |
    		  {para} var [l]:int [r]:int comando* |
    		  {para_passo} var [l]:int [m]:int [r]:int comando*;
    
    if_else = comando*;
    case = valor comando*;
    case_else = comando*;
    
    exp = {valor} valor
    	| {var} var
    	| {parenteses} exp
    	| {menos} exp
    	| {op_sum} [left]:exp [right]:exp
    	| {op_sub} [left]:exp [right]:exp
    	| {op_mult} [left]:exp [right]:exp
    	| {op_div} [left]:exp [right]:exp;
    
    exp_logica = {parenteses} exp_logica
    		   | {op_igual} [left]:exp_aux [right]:exp_aux
    		   | {op_dif} [left]:exp_aux [right]:exp_aux
    		   | {op_maior} [left]:exp_aux [right]:exp_aux
    		   | {op_menor} [left]:exp_aux [right]:exp_aux
    		   | {op_maior_igual} [left]:exp_aux [right]:exp_aux
    		   | {op_menor_igual} [left]:exp_aux [right]:exp_aux
    		   | {nao} exp_logica
    		   | {e} [left]:exp_logica [right]:exp_logica
    		   | {ou} [left]:exp_logica [right]:exp_logica 
    		   | {xor} [left]:exp_logica [right]:exp_logica;
    
    exp_aux = {valor} valor
    	| {var} var
    	| {parenteses} exp_aux
    	| {menos} exp_aux
    	| {op_sum} [left]:exp_aux [right]:exp_aux
    	| {op_sub} [left]:exp_aux [right]:exp_aux
    	| {op_mult} [left]:exp_aux [right]:exp_aux
    	| {op_div} [left]:exp_aux [right]:exp_aux;
    